[{"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SearchDonor.component.js":"1","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SendRequest.component.js":"2","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorProfile.component.js":"3"},{"size":3939,"mtime":1611067969980,"results":"4","hashOfConfig":"5"},{"size":5419,"mtime":1611072141826,"results":"6","hashOfConfig":"5"},{"size":12617,"mtime":1611072023343,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ngak6v",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SearchDonor.component.js",["15","16","17","18"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SendRequest.component.js",["19","20"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorProfile.component.js",["21","22"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios'\r\nimport { bloodGroups } from '../../../context/BloodGroupsList';\r\nimport ErrorNotice from '../../misc/ErrorNotice';\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\n\r\nfunction DonorProfile() {\r\n\r\n    const [name, setName] = useState();\r\n    const [address, setAddress] = useState();\r\n    const [contact, setContact] = useState();\r\n    const [age, setAge] = useState();\r\n    const [bloodGroup, setBloodGroup] = useState();\r\n    const [username, setUserName] = useState();\r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState();\r\n\r\n    //for error\r\n    const [error, setError] = useState();\r\n\r\n\r\n    const { userLoginData, setUserLoginData } = useContext(UserContext)\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = useState(true);  //for 1st loading data\r\n    let [profileData, setProfileData] = useState();\r\n\r\n    useEffect(() => {\r\n        if (!userLoginData.userData)\r\n            history.push('/')\r\n        try {\r\n            if (userLoginData.userData.type !== \"Donor\")\r\n                history.push(`/${userLoginData.userData.type}`)\r\n\r\n            const getData = async () => {\r\n                const userResponse = await Axios.get(\"http://localhost:5000/login/profile\", {\r\n                    headers: { \"auth-token\": userLoginData.token }\r\n                });\r\n                setProfileData(userResponse.data)\r\n                setName(userResponse.data.name);\r\n                setAddress(userResponse.data.address)\r\n                setContact(userResponse.data.contact)\r\n                setAge(userResponse.data.age)\r\n                setBloodGroup(userResponse.data.bloodGroup)\r\n                setEmail(userResponse.data.email)\r\n                setUserName(userResponse.data.username)\r\n\r\n                setLoading(false);\r\n            }\r\n            getData();\r\n\r\n        }\r\n        catch {\r\n            history.push('/')\r\n        }\r\n\r\n    }, [userLoginData])\r\n\r\n\r\n    const update = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n\r\n            const updatedUser = { name, address, contact, age, bloodGroup, email };\r\n            await Axios.post(`http://localhost:5000/user/update/${userLoginData.userData.user_id}`, updatedUser);  //user and its login data in diff tables\r\n            const UpdatedLogin = { username, password }\r\n            await Axios.post(`http://localhost:5000/login/update/${userLoginData.userData.id}`, UpdatedLogin);  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Good job!',\r\n                'Your Profile Updated Successfully',\r\n                'success'\r\n            ) //user and its login data in diff tables\r\n\r\n\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    };\r\n\r\n\r\n    const unregister = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n                await Axios.delete(` http://localhost:5000/login/delete`,\r\n                {\r\n                    headers: { \"auth-token\": userLoginData.token }\r\n                });  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Deleted',\r\n                'Awww! Sad to See You Go.',\r\n                'success'\r\n            ) //user and its login data in diff tables\r\n\r\n            setUserLoginData({\r\n                token: undefined,\r\n                userData: undefined,\r\n            });\r\n            localStorage.setItem(\"auth-token\", \"\");\r\n            history.push(\"/\")\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <DonorProfileContainer>\r\n                <div class=\"box\">\r\n                    <div class=\"loader\">\r\n                        <span class=\"back\">\r\n                            <span>L</span>\r\n                            <span>O</span>\r\n                            <span>A</span>\r\n                            <span>D</span>\r\n                            <span>I</span>\r\n                            <span>N</span>\r\n                            <span>G</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </DonorProfileContainer>\r\n\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <DonorProfileContainer>\r\n            <div>\r\n                <h1 className=\"heading\">Update Profile:</h1>\r\n                <div className=\"container container-fluid\">\r\n                    <div className=\"d-flex justify-content-center h-100\">\r\n                        <div class=\"card signupCard\">\r\n                            <div className=\"card-body\">\r\n                                <h3>Profile</h3>\r\n                                {error && (\r\n                                    <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                                )}\r\n                                <form>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"bloodBankName\" >Name: </label>\r\n                                        <input id=\"bloodBankName\" type=\"text\" value={name} className=\"form-control\"\r\n                                            onChange={(e) => setName(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"bloodGroup\" >Blood Group: </label>\r\n                                        <select value={bloodGroup} id=\"bloodGroup\" className=\"form-control\" onChange={(e) => setBloodGroup(e.target.value)}>\r\n                                            {bloodGroups.map(item => {\r\n                                                return (\r\n                                                    <option value={item}> {item} </option>\r\n                                                )\r\n                                            })}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankAddress\" >Address: </label>\r\n                                        <input id=\"BloodBankAddress\" value={address} type=\"text\" className=\"form-control\"\r\n                                            onChange={(e) => setAddress(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankContact\" >Contact No: </label>\r\n                                        <input id=\"BloodBankContact\" type=\"text\" className=\"form-control\"\r\n                                            value={contact} onChange={(e) => setContact(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"age\" >Age: </label>\r\n                                        <input id=\"age\" type=\"text\" className=\"form-control\"\r\n                                            value={age} onChange={(e) => setAge(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankUsername\" >Username: </label>\r\n                                        <input id=\"BloodBankUsername\" type=\"text\" className=\"form-control\"\r\n                                            value={username} onChange={(e) => setUserName(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankEmail\" >Email: </label>\r\n                                        <input id=\"BloodBankEmail\" type=\"text\" className=\"form-control\"\r\n                                            value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankPassword\" >Blood Bank: </label>\r\n                                        <input id=\"BloodBankPassword\" type=\"text\" className=\"form-control\"\r\n                                            value={profileData.bloodBank} readonly />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankPassword\" >Password: </label>\r\n                                        <input id=\"BloodBankPassword\" type=\"password\" className=\"form-control\"\r\n                                            onChange={(e) => setPassword(e.target.value)} />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Unregister\" className=\"btn float-right unregister_btn\" onClick={unregister} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Update\" className=\"btn float-right update_btn\" onClick={update} />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </DonorProfileContainer>\r\n    )\r\n\r\n}\r\n\r\nexport default DonorProfile;\r\n\r\nconst DonorProfileContainer = styled.div`\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Righteous&display=swap');\r\n\r\nhtml,body{\r\nheight: 100%;\r\n}\r\n\r\n.spinnerl{\r\n    padding-top:150px;\r\n    padding-bottom:150px;\r\n    \r\n}\r\n\r\nlabel {\r\npadding-right: 20px;\r\n}\r\n.container{\r\nheight: 100%;\r\nalign-content: center;\r\npadding-top: 50px;\r\nfont-family: 'Righteous', cursive;\r\n}\r\n\r\n.signupCard{\r\nheight: 650px;\r\nalign-content: center;\r\nmargin: auto;\r\nwidth: 500px;\r\nbackground-color: rgba(15, 74, 92, 0.473) ;\r\n}\r\n\r\n.card-header {\r\nbackground-color: white;\r\n}\r\n.card-body h3{\r\ncolor: white;\r\ntext-align:center;\r\npadding-bottom:5px;\r\n}\r\n#blood{\r\n    width:75%;\r\n    border:none;\r\n}\r\n\r\n.update_btn{\r\ncolor: black;\r\nbackground-color: #FFC312;\r\nwidth: 100px;\r\nmargin: 0 40px;\r\n}\r\n\r\n.update_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.unregister_btn{\r\n    color: white;\r\n    background-color: #e02525;\r\n    width: 100px;\r\n    margin: 0 40px;\r\n}\r\n    \r\n.unregister_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.ButtonGroup {\r\n    margin: auto;\r\n    justify-content: center;\r\n}\r\n.heading{\r\n    padding-top:5%;\r\n    padding-left:30%\r\n}\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n`\r\n\r\n{/* <DonorProfileContainer>\r\n<div class=\"d-flex justify-content-center\">\r\n    <div className=\"spinnerl\">\r\n        <div class=\"spinner-border text-danger\" role=\"status\" >\r\n            <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n</div>\r\n</DonorProfileContainer> */}\r\n\r\n",{"ruleId":"23","severity":1,"message":"24","line":33,"column":5,"nodeType":"25","endLine":33,"endColumn":20,"suggestions":"26"},{"ruleId":"27","severity":1,"message":"28","line":79,"column":37,"nodeType":"29","messageId":"30","endLine":79,"endColumn":39},{"ruleId":"31","severity":1,"message":"32","line":80,"column":24,"nodeType":"33","messageId":"34","endLine":80,"endColumn":26},{"ruleId":"31","severity":1,"message":"32","line":85,"column":33,"nodeType":"33","messageId":"34","endLine":85,"endColumn":35},{"ruleId":"35","severity":1,"message":"36","line":19,"column":22,"nodeType":"37","messageId":"38","endLine":19,"endColumn":31},{"ruleId":"23","severity":1,"message":"39","line":35,"column":8,"nodeType":"25","endLine":35,"endColumn":10,"suggestions":"40"},{"ruleId":"23","severity":1,"message":"24","line":62,"column":8,"nodeType":"25","endLine":62,"endColumn":23,"suggestions":"41"},{"ruleId":"42","severity":1,"message":"43","line":362,"column":1,"nodeType":"44","messageId":"45","endLine":370,"endColumn":29},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["46"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'setUserId' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'history' and 'userLoginData.userData'. Either include them or remove the dependency array.",["47"],["48"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},{"desc":"49","fix":"53"},"Update the dependencies array to be: [history, userLoginData]",{"range":"54","text":"55"},"Update the dependencies array to be: [history, userLoginData.userData]",{"range":"56","text":"57"},{"range":"58","text":"55"},[993,1008],"[history, userLoginData]",[1167,1169],"[history, userLoginData.userData]",[2146,2161]]