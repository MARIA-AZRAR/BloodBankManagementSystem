[{"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-bloodBank.component.js":"1","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-Donor.component.js":"2","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorDonations.component.js":"3","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankProfile.component.js":"4","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankRequest.component.js":"5","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorMakeDonations.component.js":"6","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminManageUsers.component.js":"7","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminStocks.component.js":"8","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\updateProfilesAdmin.js":"9","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankHome.component.js":"10","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminAlerts.component.js":"11","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\misc\\ErrorNotice.js":"12","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataBloodBank.js":"13","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataDonor.js":"14","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataAdmin.js":"15","E:\\Study\\ReactLearn\\blood-bank-system\\src\\App.js":"16","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-Recipient.component.js":"17","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\OurVision.component.js":"18","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Footer.component.js":"19","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Navbar.js":"20","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankReciever.component.js":"21","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorProfile.component.js":"22","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\ViewRequest.component.js":"23","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\RecipientProfile.component.js":"24","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Header.component.js":"25","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\authButtonOptions.js":"26","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataRecipient.js":"27","E:\\Study\\ReactLearn\\blood-bank-system\\src\\index.js":"28","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankDonor.component.js":"29","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\updateProfileUsersAdmin.js":"30","E:\\Study\\ReactLearn\\blood-bank-system\\src\\context\\BloodGroupsList.js":"31","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Sidebar.component.js":"32","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminManageDonation.component.js":"33","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminRequests.component.js":"34","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankStock.component.js":"35","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SearchDonor.component.js":"36","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorRequests.component.js":"37","E:\\Study\\ReactLearn\\blood-bank-system\\src\\context\\userDetailContext.js":"38","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\updateProfile.js":"39","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\misc\\AlertNotice.js":"40","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminManageBloodBanks.component.js":"41"},{"size":6967,"mtime":1610111934776,"results":"42","hashOfConfig":"43"},{"size":9526,"mtime":1611514515388,"results":"44","hashOfConfig":"43"},{"size":4334,"mtime":1614973176740,"results":"45","hashOfConfig":"43"},{"size":10797,"mtime":1611401719739,"results":"46","hashOfConfig":"43"},{"size":6119,"mtime":1614973515630,"results":"47","hashOfConfig":"43"},{"size":4473,"mtime":1610825569829,"results":"48","hashOfConfig":"43"},{"size":11360,"mtime":1614973906148,"results":"49","hashOfConfig":"43"},{"size":5420,"mtime":1614794272677,"results":"50","hashOfConfig":"43"},{"size":6534,"mtime":1611683035899,"results":"51","hashOfConfig":"43"},{"size":4660,"mtime":1614972373125,"results":"52","hashOfConfig":"43"},{"size":5202,"mtime":1614972329253,"results":"53","hashOfConfig":"43"},{"size":894,"mtime":1610059042726,"results":"54","hashOfConfig":"43"},{"size":1131,"mtime":1611401719738,"results":"55","hashOfConfig":"43"},{"size":830,"mtime":1610387672742,"results":"56","hashOfConfig":"43"},{"size":1246,"mtime":1611737611244,"results":"57","hashOfConfig":"43"},{"size":7304,"mtime":1611736109085,"results":"58","hashOfConfig":"43"},{"size":9493,"mtime":1611507960581,"results":"59","hashOfConfig":"43"},{"size":2196,"mtime":1610742548164,"results":"60","hashOfConfig":"43"},{"size":2613,"mtime":1610465721522,"results":"61","hashOfConfig":"43"},{"size":940,"mtime":1610043390166,"results":"62","hashOfConfig":"43"},{"size":6054,"mtime":1614973485604,"results":"63","hashOfConfig":"43"},{"size":12329,"mtime":1614795023880,"results":"64","hashOfConfig":"43"},{"size":4516,"mtime":1614973029830,"results":"65","hashOfConfig":"43"},{"size":12353,"mtime":1611355919557,"results":"66","hashOfConfig":"43"},{"size":1900,"mtime":1610387672585,"results":"67","hashOfConfig":"43"},{"size":1177,"mtime":1610113393110,"results":"68","hashOfConfig":"43"},{"size":981,"mtime":1611682778910,"results":"69","hashOfConfig":"43"},{"size":170,"mtime":1609836443361,"results":"70","hashOfConfig":"43"},{"size":5958,"mtime":1614973378075,"results":"71","hashOfConfig":"43"},{"size":8241,"mtime":1611688569820,"results":"72","hashOfConfig":"43"},{"size":75,"mtime":1610656724647,"results":"73","hashOfConfig":"43"},{"size":3443,"mtime":1611606253700,"results":"74","hashOfConfig":"43"},{"size":5291,"mtime":1614794257965,"results":"75","hashOfConfig":"43"},{"size":5384,"mtime":1614973728076,"results":"76","hashOfConfig":"43"},{"size":5429,"mtime":1614973552010,"results":"77","hashOfConfig":"43"},{"size":5484,"mtime":1614973081361,"results":"78","hashOfConfig":"43"},{"size":4303,"mtime":1614973221516,"results":"79","hashOfConfig":"43"},{"size":204,"mtime":1609960937164,"results":"80","hashOfConfig":"43"},{"size":8191,"mtime":1611688421977,"results":"81","hashOfConfig":"43"},{"size":682,"mtime":1614972233607,"results":"82","hashOfConfig":"43"},{"size":5863,"mtime":1614973829420,"results":"83","hashOfConfig":"43"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},"1ngak6v",{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"86"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"86"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"89"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"100"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"86"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-bloodBank.component.js",[],["188","189"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-Donor.component.js",[],["190","191"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorDonations.component.js",["192","193"],"import React, { Component } from 'react';\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext';\r\nimport Axios from \"axios\";\r\n\r\nfunction DonorDonations() {\r\n  const { userLoginData } = useContext(UserContext)\r\n  const [isLoading, setLoading] = useState(true);\r\n  const history = useHistory();\r\n  const [data, setData] = useState([]);\r\n  const [bloodBank, setBloodBank] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"Donor\")\r\n        history.push(`/${userLoginData.userData.type}`)\r\n\r\n\r\n      Axios.get(`http://localhost:5000/donation/blood/${userLoginData.userData.bloodBank_id}`)\r\n        .then((response) => {\r\n          setBloodBank(response.data);\r\n        })\r\n\r\n      Axios.get(`http://localhost:5000/donation/${userLoginData.userData.user_id}`)\r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n\r\n  }, [userLoginData])\r\n\r\n  if (isLoading) {\r\n    return (\r\n\r\n      <DonorDonationsContainer>\r\n        <div className=\"box\">\r\n          <div className=\"loader\">\r\n            <span className=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </DonorDonationsContainer>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <DonorDonationsContainer>\r\n      <div className=\"body\">\r\n        <h1>Your Donations</h1>\r\n\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table table-striped\">\r\n            <thead className=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">BANK</th>\r\n                <th scope=\"col\">DATE</th>\r\n                <th scope=\"col\">QUANTITY</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.banks.map((result, index) => {\r\n\r\n                return (\r\n\r\n                  <tr>\r\n                    <td>{index + 1}</td>\r\n                    <td>{bloodBank.bank}</td>\r\n                    <td>{(new Date(result.created_at)).toLocaleString().split(',')[0]}</td>\r\n                    <td>{result.quantity}</td>\r\n                  </tr>\r\n\r\n                )\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </DonorDonationsContainer>\r\n  )\r\n}\r\nexport default DonorDonations;\r\nconst DonorDonationsContainer = styled.div`\r\n\r\n.spinnerl{\r\n  padding-top:150px;\r\n  padding-bottom:150px;\r\n  \r\n}\r\n\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankProfile.component.js",["194","195","196"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios'\r\nimport ErrorNotice from '../../misc/ErrorNotice';\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\n\r\nfunction BankProfile() {\r\n\r\n    const [name, setName] = useState();\r\n    const [address, setAddress] = useState();\r\n    const [contact, setContact] = useState();\r\n    const [username, setUserName] = useState();\r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState();\r\n\r\n    //for error\r\n    const [error, setError] = useState();\r\n\r\n\r\n     const { userLoginData, setUserLoginData } = useContext(UserContext)\r\n     const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = useState(true);  //for 1st loading data\r\n    let [profileData, setProfileData] = useState();\r\n\r\n     useEffect(() => {\r\n         if (!userLoginData.userData)\r\n            history.push('/')\r\n      try {\r\n           if (userLoginData.userData.type !== \"BloodBank\")\r\n                history.push(`/${userLoginData.userData.type}`)\r\n\r\n            const getData = async () => {\r\n                const userResponse = await Axios.get(\"http://localhost:5000/login/profile\", {\r\n                    headers: { \"auth-token\": userLoginData.token }\r\n                });\r\n                setProfileData(userResponse.data)\r\n                setName(userResponse.data.name);\r\n                setAddress(userResponse.data.address)\r\n                setContact(userResponse.data.contact)\r\n                setEmail(userResponse.data.email)\r\n                setUserName(userResponse.data.username)\r\n\r\n                setLoading(false);\r\n            }\r\n            getData();\r\n\r\n        }\r\n        catch {\r\n            history.push('/')\r\n        }\r\n\r\n    }, [userLoginData])\r\n\r\n\r\n    const update = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n\r\n            const updatedUser = { name, address, contact,email };\r\n            await Axios.post(`http://localhost:5000/user/update/${userLoginData.userData.user_id}`, updatedUser);  //user and its login data in diff tables\r\n            const UpdatedLogin = { username, password }\r\n            await Axios.post(`http://localhost:5000/login/update/${userLoginData.userData.id}`, UpdatedLogin);  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Good job!',\r\n                'Your Profile Updated Successfully',\r\n                'success'\r\n            ) //user and its login data in diff tables\r\n\r\n\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    };\r\n\r\n\r\n    const unregister = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n                await Axios.delete(` http://localhost:5000/login/delete`,\r\n                {\r\n                    headers: { \"auth-token\": userLoginData.token }\r\n                });  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Deleted',\r\n                'Awww! Sad to See You Go.',\r\n                'success'\r\n            ) //user and its login data in diff tables\r\n\r\n            setUserLoginData({\r\n                token: undefined,\r\n                userData: undefined,\r\n            });\r\n            localStorage.setItem(\"auth-token\", \"\");\r\n            history.push(\"/\")\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <BankProfileContainer>\r\n                <div class=\"box\">\r\n                    <div class=\"loader\">\r\n                        <span class=\"back\">\r\n                            <span>L</span>\r\n                            <span>O</span>\r\n                            <span>A</span>\r\n                            <span>D</span>\r\n                            <span>I</span>\r\n                            <span>N</span>\r\n                            <span>G</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </BankProfileContainer>\r\n\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <BankProfileContainer>\r\n            <div>\r\n                <h1 className=\"heading\">Update Profile:</h1>\r\n                <div className=\"container container-fluid\">\r\n                    <div className=\"d-flex justify-content-center h-100\">\r\n                        <div class=\"card signupCard\">\r\n                            <div className=\"card-body\">\r\n                                <h3>Profile</h3>\r\n                                {error && (\r\n                                    <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                                )}\r\n                                <form>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"bloodBankName\" >Name: </label>\r\n                                        <input id=\"bloodBankName\" type=\"text\" value={name} className=\"form-control\"\r\n                                          onChange={(e) => setName(e.target.value)}    />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankAddress\" >Address: </label>\r\n                                        <input id=\"BloodBankAddress\"  value={address}  type=\"text\" className=\"form-control\"\r\n                                           onChange={(e) => setAddress(e.target.value)}  />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankContact\" >Contact No: </label>\r\n                                        <input id=\"BloodBankContact\"  value={contact}  type=\"text\" className=\"form-control\"\r\n                                          onChange={(e) => setContact(e.target.value)}   />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankUsername\" >Username: </label>\r\n                                        <input id=\"BloodBankUsername\"  value={username}  type=\"text\" className=\"form-control\"\r\n                                          onChange={(e) => setUserName(e.target.value)}  />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankEmail\" >Email: </label>\r\n                                        <input id=\"BloodBankEmail\"  value={email}  type=\"text\" className=\"form-control\"\r\n                                         onChange={(e) => setEmail(e.target.value)}    />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankPassword\" >Password: </label>\r\n                                        <input id=\"BloodBankPassword\"  type=\"password\" className=\"form-control\"\r\n                                         onChange={(e) => setPassword(e.target.value)}   />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Unregister\" className=\"btn float-right unregister_btn\" onClick={unregister} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Update\" className=\"btn float-right update_btn\" onClick={update}  />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </BankProfileContainer>\r\n    )\r\n\r\n}\r\n\r\nexport default BankProfile;\r\n\r\nconst BankProfileContainer = styled.div`\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Righteous&display=swap');\r\n\r\nhtml,body{\r\nheight: 100%;\r\n}\r\n\r\n.spinnerl{\r\n    padding-top:150px;\r\n    padding-bottom:150px;\r\n    \r\n}\r\n\r\nlabel {\r\npadding-right: 20px;\r\n}\r\n.container{\r\nheight: 100%;\r\nalign-content: center;\r\npadding-top: 50px;\r\nfont-family: 'Righteous', cursive;\r\n}\r\n\r\n.signupCard{\r\nheight: 500px;\r\nalign-content: center;\r\nmargin: auto;\r\nwidth: 500px;\r\nbackground-color: rgba(15, 74, 92, 0.473) ;\r\n}\r\n\r\n.card-header {\r\nbackground-color: white;\r\n}\r\n.card-body h3{\r\ncolor: white;\r\ntext-align:center;\r\npadding-bottom:5px;\r\n}\r\n#blood{\r\n    width:75%;\r\n    border:none;\r\n}\r\n\r\n.update_btn{\r\ncolor: black;\r\nbackground-color: #FFC312;\r\nwidth: 100px;\r\nmargin: 0 40px;\r\n}\r\n\r\n.update_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.unregister_btn{\r\n    color: white;\r\n    background-color: #e02525;\r\n    width: 100px;\r\n    margin: 0 40px;\r\n}\r\n    \r\n.unregister_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.ButtonGroup {\r\n    margin: auto;\r\n    justify-content: center;\r\n}\r\n.heading{\r\n    padding-top:5%;\r\n    padding-left:30%\r\n}\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n`\r\n\r\n{/* <DonorProfileContainer>\r\n<div class=\"d-flex justify-content-center\">\r\n    <div className=\"spinnerl\">\r\n        <div class=\"spinner-border text-danger\" role=\"status\" >\r\n            <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n</div>\r\n</DonorProfileContainer> */}\r\n\r\n","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankRequest.component.js",["197"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorMakeDonations.component.js",[],["198","199"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminManageUsers.component.js",["200","201"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext';\r\nimport Axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n\r\nfunction RenderButtons(props) {\r\n    if (props.status === 'Active') {\r\n        return (\r\n            <td>\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={props.updateD}>Update</button>\r\n                <br />\r\n                <button type=\"button\" class=\"btn btn-danger\" onClick={props.deleteD}>Delete</button>\r\n            </td>\r\n        )\r\n    }\r\n    return (\r\n        <td>\r\n        </td>\r\n    )\r\n}\r\n\r\n\r\nfunction DonorRow(props) {\r\n\r\n    const history = useHistory();\r\n\r\n    const deleteDonor = async () => {\r\n        await Axios.delete(`http://localhost:5000/login/deleteBloodBank/${props.donor_id}`)\r\n        console.log(\"deleted\");\r\n        Swal.fire(\r\n            'Deleted',\r\n            'Awww! Sad to See You Go.',\r\n            'success'\r\n        )\r\n        props.update();\r\n    }\r\n\r\n    const updateDonor = (e) => {\r\n        e.preventDefault();\r\n        history.push('/Admin/Users/ProfileEdit/' + props.donor_id);\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{props.index}</th>\r\n            <td>{props.donor.name}</td>\r\n            <td>{props.donor.age} </td>\r\n            <td>{props.donor.bloodGroup}</td>\r\n            <td>{props.donor.address}</td>\r\n            <td>{props.donor.contact}</td>\r\n            <td>{props.donor.email}</td>\r\n            <td>{props.donor.bloodBank}</td>\r\n            <td>{props.donor.status}</td>\r\n            <RenderButtons status={props.donor.status} deleteD={deleteDonor} updateD={updateDonor} />\r\n        </tr>\r\n    )\r\n}\r\n\r\n\r\nfunction AdminDonor() {\r\n    //to prevent from loading if user is log out\r\n    const { userLoginData } = useContext(UserContext)\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = useState(true);  //for 1st loading data\r\n    const [data, setData] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userLoginData.userData)\r\n            history.push('/')\r\n        try {\r\n            if (userLoginData.userData.type !== \"Admin\")\r\n                history.push(`/${userLoginData.userData.type}`)\r\n\r\n            const getData = async () => {\r\n                const userResponse = await Axios.get(\"http://localhost:5000/bloodRequest/getAdminDonor\");\r\n\r\n                setData(userResponse.data)\r\n                setLoading(false);\r\n            }\r\n            getData();\r\n        }\r\n        catch {\r\n            history.push('/')\r\n        }\r\n\r\n    }, [userLoginData])\r\n\r\n    //after deleting data not updating thats why\r\n    const updateState = async () => {\r\n        const userResponse = await Axios.get(\"http://localhost:5000/bloodRequest/getAdminDonor\");\r\n        setData(userResponse.data)\r\n    }\r\n\r\n    const showDonors = () => {\r\n        return (\r\n            data.map((currentDonor, index) => {\r\n                //this is returning single donor row\r\n                return <DonorRow donor={currentDonor} donor_id={currentDonor._id} index={index + 1} update={updateState} />\r\n            })\r\n        )\r\n    }\r\n\r\n    const Donor = (e) => {\r\n        e.preventDefault();\r\n        history.push('/Admin/User');\r\n    }\r\n\r\n    const Recipient = (e) => {\r\n        e.preventDefault();\r\n        history.push('/Admin/Recipient');\r\n    }\r\n\r\n\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <BankContainer>\r\n                <div class=\"box\">\r\n                    <div class=\"loader\">\r\n                        <span class=\"back\">\r\n                            <span>L</span>\r\n                            <span>O</span>\r\n                            <span>A</span>\r\n                            <span>D</span>\r\n                            <span>I</span>\r\n                            <span>N</span>\r\n                            <span>G</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </BankContainer>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        <BankContainer>\r\n            <div class=\"body\">\r\n                <h1>Blood Donors</h1>\r\n                <div className=\"btn-group\">\r\n                    <button type=\"button\" className=\"btn btn-rounded btn-info dbtn\" onClick={Donor}>Donor</button>\r\n                    <button type=\"button\" className=\"btn btn-rounded btn-info dbtn\" onClick={Recipient}>Recipients</button>\r\n                </div>\r\n                <div className=\"table-responsive\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead class=\"thead\">\r\n                            <tr>\r\n                                <th scope=\"col\">ID</th>\r\n                                <th scope=\"col\">DONOR NAME</th>\r\n                                <th scope=\"col\">AGE</th>\r\n                                <th scope=\"col\">BLOOD GROUP</th>\r\n                                <th scope=\"col\">ADDRESS</th>\r\n                                <th scope=\"col\">CONTACT NO</th>\r\n                                <th scope=\"col\">EMAIL</th>\r\n                                <th scope=\"col\">BLOOD BANK</th>\r\n                                <th scope=\"col\">STATUS</th>\r\n                                <th scope=\"col\">ACTION</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {showDonors()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </BankContainer>\r\n    )\r\n}\r\n\r\nfunction AdminRecipient() {\r\n    //to prevent from loading if user is log out\r\n    const { userLoginData } = useContext(UserContext)\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = useState(true);  //for 1st loading data\r\n    const [data, setData] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userLoginData.userData)\r\n            history.push('/')\r\n        try {\r\n            if (userLoginData.userData.type !== \"Admin\")\r\n                history.push(`/${userLoginData.userData.type}`)\r\n\r\n            const getData = async () => {\r\n                const userResponse = await Axios.get(\"http://localhost:5000/bloodRequest/getAdminRecipient\");\r\n\r\n                setData(userResponse.data)\r\n                setLoading(false);\r\n            }\r\n            getData();\r\n        }\r\n        catch {\r\n            history.push('/')\r\n        }\r\n\r\n    }, [userLoginData])\r\n\r\n    //after deleting data not updating thats why\r\n    const updateState = async () => {\r\n        const userResponse = await Axios.get(\"http://localhost:5000/bloodRequest/getAdminRecipient\");\r\n        setData(userResponse.data)\r\n    }\r\n\r\n    const showRecipients = () => {\r\n        return (\r\n            data.map((currentRecipient, index) => {\r\n                //this is returning single donor row\r\n                return <DonorRow donor={currentRecipient} donor_id={currentRecipient._id} index={index + 1} update={updateState} />\r\n            })\r\n        )\r\n    }\r\n\r\n    const Donor = (e) => {\r\n        e.preventDefault();\r\n        history.push('/Admin/User');\r\n    }\r\n\r\n    const Recipient = (e) => {\r\n        e.preventDefault();\r\n        history.push('/Admin/Recipient');\r\n    }\r\n\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <BankContainer>\r\n                <div class=\"box\">\r\n                    <div class=\"loader\">\r\n                        <span class=\"back\">\r\n                            <span>L</span>\r\n                            <span>O</span>\r\n                            <span>A</span>\r\n                            <span>D</span>\r\n                            <span>I</span>\r\n                            <span>N</span>\r\n                            <span>G</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </BankContainer>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        <BankContainer>\r\n            <div class=\"body\">\r\n                <h1>Blood Donors</h1>\r\n                <div className=\"btn-group\">\r\n                    <button type=\"button\" className=\"btn btn-rounded btn-info dbtn\" onClick={Donor}>Donor</button>\r\n                    <button type=\"button\" className=\"btn btn-rounded btn-info dbtn\" onClick={Recipient}>Recipients</button>\r\n                </div>\r\n                <div className=\"table-responsive\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead class=\"thead\">\r\n                            <tr>\r\n                                <th scope=\"col\">ID</th>\r\n                                <th scope=\"col\">DONOR NAME</th>\r\n                                <th scope=\"col\">AGE</th>\r\n                                <th scope=\"col\">BLOOD GROUP</th>\r\n                                <th scope=\"col\">ADDRESS</th>\r\n                                <th scope=\"col\">CONTACT NO</th>\r\n                                <th scope=\"col\">EMAIL</th>\r\n                                <th scope=\"col\">BLOOD BANK</th>\r\n                                <th scope=\"col\">STATUS</th>\r\n                                <th scope=\"col\">ACTION</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {showRecipients()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </BankContainer>\r\n    )\r\n}\r\n\r\nexport { AdminDonor, AdminRecipient };\r\n\r\nconst BankContainer = styled.div`\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.btn-group {\r\n    float: right;\r\n}\r\n\r\n.btn-group button {\r\n    border: 1px solid black;\r\n    color: white; \r\n    padding: 10px 24px; \r\n    cursor: pointer; \r\n    float: right; \r\n  }\r\n\r\n.btn,\r\nbtn-primary\r\n {\r\n    margin-top: 10px;\r\n    margin-bottom: 25px;\r\n    position: relative;\r\n}\r\n\r\n.btn-primary{\r\n    left: 0px;\r\n    margin-left: 100px;\r\n}\r\n.btn-danger {\r\n    left: 0px;\r\n    margin-top: -90px;\r\n}\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminStocks.component.js",["202","203","204"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios';\r\nimport { bloodGroups } from '../../../context/BloodGroupsList';\r\n\r\nfunction AdminStock() {\r\n  //to prevent from loading if user is log out\r\n  const { userLoginData } = useContext(UserContext)\r\n  const history = useHistory();\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n\r\n  function countQuantity() {\r\n    var c = 0;\r\n    for (var i = 0; i < data.length; i++) {\r\n      c = c + data[i].quantity;\r\n    }\r\n    return c;\r\n  }\r\n  function countAll() {\r\n    var c = 0;\r\n    for (var i = 0; i < data.length; i++) {\r\n      if (search == '') {\r\n        c = 0;\r\n      }\r\n      if (data[i].bloodGroup == search) { c = c + data[i].quantity; }\r\n    }\r\n    return c;\r\n  }\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      // if (userLoginData.userData.type !== \"BloodBank\")  //to prevent accessing any other type\r\n      // history.push(`/${userLoginData.userData.type}`)\r\n      history.push(\"/Admin/Stock\");\r\n      Axios.get(\"http://localhost:5000/bloodBag/getAdminBags\")\r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n  }, [userLoginData])\r\n\r\n  if (isLoading) {\r\n    return (\r\n\r\n      <AdminContainer>\r\n        <div class=\"box\">\r\n          <div class=\"loader\">\r\n            <span class=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </AdminContainer>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <AdminContainer>\r\n      <div class=\"body\">\r\n        <h1>Blood Stock</h1>\r\n\r\n\r\n        <table class=\"table table-striped\">\r\n          <thead class=\"thead\">\r\n            <tr>\r\n              <th scope=\"col\">ID</th>\r\n              <th scope=\"col\">BLOOD GROUP</th>\r\n              <th scope=\"col\">DATE DONATED</th>\r\n              <th scope=\"col\">BLOOD BANK</th>\r\n              <th scope=\"col\">QUANTITY</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((result, index) => {\r\n              return (\r\n                <tr>\r\n                  <td>{index + 1}</td>\r\n                  <td>{result.bloodGroup}</td>\r\n                  <td>{(new Date(result.dateDonated).toLocaleString().split(',')[0])}</td>\r\n                  <td>{result.name}</td>\r\n                  <td>{result.quantity}</td>\r\n                </tr>\r\n\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <h6>Total Quantity:  <input type=\"text\" id=\"myText\" value={countQuantity()} /></h6>\r\n        <h2>Blood Quantity</h2>\r\n        <div className=\"Bottom\">\r\n          <h5>Select Blood Group:</h5>\r\n          <select id=\"blood\" className=\"selectB\" name=\"bloodGroup\" onChange={(event) => { setSearch(event.target.value) }}>\r\n            <option> </option>\r\n            {bloodGroups.map(item => {\r\n              return (\r\n                <option value={item}>{item}</option>\r\n              )\r\n            })}\r\n          </select>\r\n          <br />\r\n          <input type=\"text\"\r\n            id=\"myText\"\r\n            value={countAll()} />\r\n        </div>\r\n      </div>\r\n    </AdminContainer>\r\n  )\r\n}\r\n\r\nexport default AdminStock;\r\n\r\nconst AdminContainer = styled.div`\r\n.spinnerl{\r\n  padding-top:150px;\r\n  padding-bottom:150px; \r\n}\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.Bottom{\r\n  padding-left:70%;  \r\n}\r\nh2{\r\n    color:#6B1A08;\r\n    padding-left:65%;\r\n    font-weight:bold;\r\n}\r\nh6{\r\n    padding-left:60%;   \r\n}\r\ninput{\r\n    text-align:center;\r\n    width:40%;\r\n}\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\updateProfilesAdmin.js",["205","206"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios'\r\nimport ErrorNotice from '../../misc/ErrorNotice';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n\r\nfunction UpdateBloodBankAdmin(props) {\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [address, setAddress] = useState(\"\");\r\n    const [contact, setContact] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [type, setType] = useState(\"\")\r\n\r\n    //for error\r\n    const [error, setError] = useState();\r\n\r\n\r\n    const { userLoginData } = useContext(UserContext)\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        if (!userLoginData.userData)\r\n            history.push('/')\r\n        try {\r\n            if (userLoginData.userData.type !== \"Admin\")\r\n                history.push(`/${userLoginData.userData.type}`)\r\n\r\n            Axios.get('http://localhost:5000/user/' + props.match.params.id)\r\n                .then(response => {\r\n\r\n                    setName(response.data.name);\r\n                    setAddress(response.data.address);\r\n                    setEmail(response.data.email);\r\n                    setContact(response.data.contact);\r\n                    setType(response.data.type)\r\n                })\r\n                .catch(function (error) {\r\n                    console.log(error);\r\n                })\r\n        }\r\n        catch {\r\n            history.push('/')\r\n        }\r\n    }, [userLoginData])\r\n\r\n\r\n    const back = async (e) => {\r\n        e.preventDefault();\r\n        history.push('/Admin/BloodBank')\r\n    }\r\n\r\n    const update = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n\r\n            const updatedUser = { name, address, contact, email };\r\n            await Axios.post(`http://localhost:5000/user/update/${props.match.params.id}`, updatedUser);  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Good job!',\r\n                'Profile Updated Successfully',\r\n                'success'\r\n            )\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <BloodBankProfileContainer>\r\n            <div>\r\n                <h1 className=\"heading\">Update BloodBank</h1>\r\n                <div className=\"container container-fluid\">\r\n                    <div className=\"d-flex justify-content-center h-100\">\r\n                        <div class=\"card signupCard\">\r\n                            <div className=\"card-body\">\r\n                                <h3>Profile</h3>\r\n                                {error && (\r\n                                    <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                                )}\r\n                                <form>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"bloodBankName\" >Name: </label>\r\n                                        <input id=\"bloodBankName\" type=\"text\" value={name} className=\"form-control\"\r\n                                            onChange={(e) => setName(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankAddress\" >Address: </label>\r\n                                        <input id=\"BloodBankAddress\" value={address} type=\"text\" className=\"form-control\"\r\n                                            onChange={(e) => setAddress(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankContact\" >Contact No: </label>\r\n                                        <input id=\"BloodBankContact\" type=\"text\" className=\"form-control\"\r\n                                            value={contact} onChange={(e) => setContact(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankEmail\" >Email: </label>\r\n                                        <input id=\"BloodBankEmail\" type=\"text\" className=\"form-control\"\r\n                                            value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Back\" className=\"btn float-right back_btn\" onClick={back} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Update\" className=\"btn float-right update_btn\" onClick={update} />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </BloodBankProfileContainer>\r\n    )\r\n\r\n}\r\n\r\nexport default UpdateBloodBankAdmin;\r\n\r\nconst BloodBankProfileContainer = styled.div`\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Righteous&display=swap');\r\n\r\nhtml,body{\r\nheight: 100%;\r\n}\r\n\r\n.spinnerl{\r\n    padding-top:150px;\r\n    padding-bottom:150px;\r\n    \r\n}\r\n\r\nlabel {\r\npadding-right: 20px;\r\n}\r\n.container{\r\nheight: 100%;\r\nalign-content: center;\r\npadding-top: 50px;\r\nfont-family: 'Righteous', cursive;\r\n}\r\n\r\n.signupCard{\r\nheight: 410px;\r\nalign-content: center;\r\nmargin: auto;\r\nwidth: 500px;\r\nbackground-color: rgba(15, 74, 92, 0.473) ;\r\n}\r\n\r\n.card-header {\r\nbackground-color: white;\r\n}\r\n.card-body h3{\r\ncolor: white;\r\ntext-align:center;\r\npadding-bottom:5px;\r\n}\r\n#blood{\r\n    width:75%;\r\n    border:none;\r\n}\r\n\r\n.update_btn{\r\ncolor: black;\r\nbackground-color: #FFC312;\r\nwidth: 100px;\r\nmargin: 0 40px;\r\n}\r\n\r\n.update_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.back_btn{\r\n    color: white;\r\n    background-color: #e02525;\r\n    width: 100px;\r\n    margin: 0 40px;\r\n}\r\n    \r\n.back_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.ButtonGroup {\r\n    margin: auto;\r\n    justify-content: center;\r\n}\r\n.heading{\r\n    padding-top:5%;\r\n    padding-left:30%\r\n}\r\n`\r\n\r\n","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankHome.component.js",["207","208"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext';\r\nimport Axios from 'axios';\r\nimport AlertNotice from '../../misc/AlertNotice';\r\n\r\nfunction BankHome() {\r\n\r\n  //to prevent from loading if user is log out\r\n  const { userLoginData } = useContext(UserContext)\r\n  const [isLoading, setLoading] = useState(true);\r\n  const history = useHistory();\r\n  const [data, setData] = useState([]);\r\n  const [alert, setAlert] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"BloodBank\")  //to prevent accessing any other type\r\n        history.push(`/${userLoginData.userData.type}`)\r\n\r\n      const getData = async () => {\r\n        await Axios.get(\"http://localhost:5000/bloodBag/getBags\")\r\n          .then((response) => {\r\n            setData(response.data);\r\n            console.log(response.data);\r\n          })\r\n        await Axios.get(`http://localhost:5000/bloodBag/Alerts/${userLoginData.userData.user_id}`)\r\n          .then((response) => {\r\n            setAlert(response.data);\r\n\r\n            setLoading(false);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error)\r\n          })\r\n      }\r\n\r\n      getData();\r\n\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n  }, [userLoginData])\r\n\r\n\r\n  const alerts = () => {\r\n    return (\r\n      alert.map((item) => {\r\n        return (\r\n          <AlertNotice alert = {item} />\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <HomeContainer>\r\n        <div class=\"box\">\r\n          <div class=\"loader\">\r\n            <span class=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </HomeContainer>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <HomeContainer>\r\n      <div class=\"body\">\r\n        <h1>Alerts</h1>\r\n        {alerts()}\r\n        <table class=\"table table-striped\">\r\n          <thead class=\"thead\">\r\n            <tr>\r\n              <th scope=\"col\">ID</th>\r\n              <th scope=\"col\">BLOOD GROUP</th>\r\n              <th scope=\"col\">DATE DONATED</th>\r\n              <th scope=\"col\">DATE EXPIRED</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.bag.map((result, index) => {\r\n              return (\r\n                <tr>\r\n                  <td>{index + 1}</td>\r\n                  <td>{result.bloodGroup}</td>\r\n                  <td>{(new Date(result.created_at).toLocaleString().split(',')[0])}</td>\r\n                  <td>{(new Date(result.expiry_date).toLocaleString().split(',')[0])}</td>\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </HomeContainer>\r\n  )\r\n}\r\nexport default BankHome;\r\n\r\nconst HomeContainer = styled.div`\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n\r\n.alerts{\r\n    font-size:18px;\r\n    font-style:italic;\r\n    color:red;\r\n    font-weight:bold;\r\n    margin-bottom: 15px;\r\n    padding:3px;\r\n\r\n}\r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\r\n\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminAlerts.component.js",["209"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios';\r\nimport AlertNotice from '../../misc/AlertNotice';\r\n\r\n\r\nfunction AdminAlert() {\r\n  //to prevent from loading if user is log out\r\n  const { userLoginData } = useContext(UserContext)\r\n  const history = useHistory();\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [alert, setAlert] = useState([]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      // if (userLoginData.userData.type !== \"BloodBank\")  //to prevent accessing any other type\r\n      // history.push(`/${userLoginData.userData.type}`)\r\n\r\n      const getData = async () => {\r\n\r\n        await Axios.get(\"http://localhost:5000/bloodBag/getAdminExpiredBags\")\r\n          .then((response) => {\r\n            setData(response.data);\r\n            console.log(response.data);\r\n          })\r\n        await Axios.get(\"http://localhost:5000/bloodBag/getAdminAlerts\")\r\n          .then((response) => {\r\n            setAlert(response.data);\r\n\r\n            setLoading(false);\r\n          })\r\n          .catch((error) => {\r\n            console.log(error)\r\n          })\r\n      }\r\n\r\n      getData();\r\n\r\n    }\r\n\r\n    catch {\r\n      history.push('/')\r\n      //get data\r\n      //     const getData = async () => {\r\n      //     const requestResponse = await \r\n      //   }\r\n      //   getData();\r\n      // }\r\n    }\r\n  }, [userLoginData])\r\n\r\n  const alerts = () => {\r\n    return (\r\n      alert.map((item) => {\r\n        return (\r\n          <AlertNotice alert = {item} />\r\n        )\r\n      })\r\n    )\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n\r\n      <AdminContainer>\r\n        <div class=\"box\">\r\n          <div class=\"loader\">\r\n            <span class=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </AdminContainer>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <AdminContainer>\r\n      <div class=\"body\">\r\n        <h1>Alerts</h1>\r\n        {alerts()}\r\n        <h1>Expired Bags</h1>\r\n\r\n\r\n        <table class=\"table table-striped\">\r\n          <thead class=\"thead\">\r\n            <tr>\r\n              <th scope=\"col\">ID</th>\r\n              <th scope=\"col\">BLOOD GROUP</th>\r\n              <th scope=\"col\">DATE DONATED</th>\r\n              <th scope=\"col\">BLOOD BANK</th>\r\n              <th scope=\"col\">DATE EXPIRED</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((result, index) => {\r\n              return (\r\n                <tr>\r\n                  <td>{index + 1}</td>\r\n                  <td>{result.bloodGroup}</td>\r\n                  <td>{(new Date(result.dateDonated).toLocaleString().split(',')[0])}</td>\r\n                  <td>{result.name}</td>\r\n                  <td>{(new Date(result.dateExpired).toLocaleString().split(',')[0])}</td>\r\n                </tr>\r\n\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </AdminContainer>\r\n  )\r\n}\r\n\r\nexport default AdminAlert;\r\n\r\nconst AdminContainer = styled.div`\r\n.spinnerl{\r\n  padding-top:150px;\r\n  padding-bottom:150px; \r\n}\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.Bottom{\r\n  padding-left:70%;  \r\n}\r\nh2{\r\n    color:#6B1A08;\r\n    padding-left:65%;\r\n    font-weight:bold;\r\n}\r\nh6{\r\n    padding-left:60%;   \r\n}\r\ninput{\r\n    text-align:center;\r\n    width:40%;\r\n}\r\n\r\n.alerts{\r\n    font-size:18px;\r\n    font-style:italic;\r\n    color:red;\r\n    font-weight:bold;\r\n    margin-bottom: 15px;\r\n    padding:3px;\r\n\r\n}\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\misc\\ErrorNotice.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataBloodBank.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataDonor.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataAdmin.js",["210"],"import React from 'react'\r\nimport * as FaIcons from \"react-icons/fa\"\r\nimport * as IoIcons from \"react-icons/io\"\r\nimport * as RiIcons from \"react-icons/ri\"\r\nimport * as ImIcons from \"react-icons/im\"\r\nimport { GrUserManager } from \"react-icons/gr\";\r\nimport { FcManager } from \"react-icons/fc\";\r\n\r\n\r\n\r\nexport const NavbarDataA = [\r\n    {\r\n        title: 'Home',\r\n        path: '/Admin',\r\n        icon: <FaIcons.FaEnvelopeOpenText />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Manage Blood Stock',\r\n        path: '/Admin/Stock',\r\n        icon: <RiIcons.RiUserSearchLine />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'View Requests',\r\n        path: '/Admin/Request',\r\n        icon: <IoIcons.IoIosPaper />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'View Donations',\r\n        path: '/Admin/Donation',\r\n        icon: <IoIcons.IoIosPaper />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Manage Users',\r\n        path: '/Admin/User',\r\n        // icon: <ImIcons.ImProfile />,\r\n        icon: <FcManager />,\r\n        cName: 'nav-text'\r\n    },\r\n    {\r\n        title: 'Manage BloodBanks',\r\n        path: '/Admin/BloodBank',\r\n        icon: <ImIcons.ImProfile />,\r\n        cName: 'nav-text'\r\n    }\r\n]","E:\\Study\\ReactLearn\\blood-bank-system\\src\\App.js",["211"],"import React, { useState, useEffect } from 'react';  //useEffect will run exactly 1 time \n//when component loaded or each time component has been switched \n\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Axios from 'axios';\n\n//Blood Bank\nimport BankHome from './Components/pages/BloodBank/BankHome.component';\nimport BankDonor from './Components/pages/BloodBank/BankDonor.component';\nimport BankReciever from './Components/pages/BloodBank/BankReciever.component';\nimport BankRequest from './Components/pages/BloodBank/BankRequest.component';\nimport BankStock from './Components/pages/BloodBank/BankStock.component';\nimport UpdateProfile from './Components/pages/BloodBank/updateProfile';\nimport BankProfile from './Components/pages/BloodBank/BankProfile.component';\n\n\nimport Login from './Components/auth/login-form.component';\nimport LoginAdmin from './Components/auth/login-form-admin.component';\nimport SignupBloodBank from './Components/auth/signup-form-bloodBank.component';\nimport {SignupDonor} from './Components/auth/signup-form-Donor.component';\nimport {SignupRecipinet} from './Components/auth/signup-form-Recipient.component';\n\n//import Navbar from './Components/navbar.component';\nimport Header from './Components/layout/Header.component';\nimport Footer from './Components/layout/Footer.component';\nimport Navbar from './Components/layout/Navbar'\nimport AboutUs from './Components/layout/OurVision.component';\n\n//extras\nimport UserContext from './context/userDetailContext';\n\n//Donor\n\nimport DonorDonations from './Components/pages/Donor/DonorDonations.component';\nimport DonorRequests from './Components/pages/Donor/DonorRequests.component';\nimport DonorMakeDonations from './Components/pages/Donor/DonorMakeDonations.component';\nimport DonorProfile from './Components/pages/Donor/DonorProfile.component';\n\n\n//Recipient\n\n\nimport RecipientSendRequest from './Components/pages/Recipient/SendRequest.component';\nimport SearchDonor  from './Components/pages/Recipient/SearchDonor.component';\nimport RecipientRequests from './Components/pages/Recipient/ViewRequest.component';\nimport RecipientProfile from './Components/pages/Recipient/RecipientProfile.component';\n\n//Admin\nimport AdminStock from './Components/pages/Admin/AdminStocks.component';\nimport AdminRequest from './Components/pages/Admin/AdminRequests.component';\nimport AdminAlert from './Components/pages/Admin/AdminAlerts.component';\nimport AdminManageDonation from './Components/pages/Admin/AdminManageDonation.component';\nimport AdminBloodBanks from './Components/pages/Admin/AdminManageBloodBanks.component';\nimport UpdateBloodBankAdmin from './Components/pages/Admin/updateProfilesAdmin';\nimport {AdminDonor, AdminRecipient} from './Components/pages/Admin/AdminManageUsers.component';\nimport UpdateUsersProfileAdmin from './Components/pages/Admin/updateProfileUsersAdmin';\n\n\nfunction App() {\n\n  const [userLoginData, setUserLoginData] = useState({  //this state will store the user data needed in all app like id\n    token: undefined,\n    userData: undefined\n  });\n\n  //now we need to get the token from the session if any and check if its valid or not to login the user\n  useEffect(() => {  //useEffect needs arrow func which can't be async \n    const checkUserLogin = async () => {  //data is required to be accssed from backend so async thats why another fun is created in usecase arroe func\n      let sessionToken = localStorage.getItem(\"auth-token\"); //if no key with this name w'll get a null in session token\n         console.log(sessionToken);\n      if (sessionToken === null) {  //a null session token can erase error at the backend \n        localStorage.setItem(\"auth-token\", \"\")  //adding key in local storage & value will be given later\n        sessionToken = \"\"   //so assigning it the empty string\n      }\n      //now checkiing if user is logged in by giving a post request to if token is valid\n      const tokenResponse = await Axios.post(\n        \"http://localhost:5000/login/IsValidToken\",\n        null,\n        {\n          headers: { \"auth-token\": sessionToken }\n        });  //data is null but it has a header which will have a token\n\n      if (tokenResponse.data) {  //true if user logged in\n        const userResponse = await Axios.get(\"http://localhost:5000/login/\", {\n          headers: { \"auth-token\": sessionToken }\n        });\n\n        setUserLoginData({\n          token: sessionToken,\n          userData: userResponse.data\n        });\n      }\n    }\n    checkUserLogin();\n  }, []) \n\n  return (\n    <>\n      <Header />\n      <UserContext.Provider value={{ userLoginData, setUserLoginData }}>\n        <Router>\n          <Navbar />\n          <Route path=\"/\" exact component={AboutUs} />\n          <Route path=\"/signup\" exact component={SignupBloodBank} />\n\n          <Route path=\"/AdminLogin\" exact component={LoginAdmin} />\n          <Route path=\"/signin\" exact component={Login} />\n          <Route path=\"/signup-donor\" exact component = {SignupDonor} />\n          <Route path=\"/signup-recipient\" exact component = {SignupRecipinet}/>\n          <Route path=\"/BloodBank\" exact component={BankHome} />\n          <Route path=\"/BloodBank/Donor\" exact component={BankDonor} />\n          <Route path=\"/BloodBank/ProfileEdit/:id\" exact component = {UpdateProfile} />\n          <Route path=\"/BloodBank/Reciever\" exact component={BankReciever} />\n          <Route path=\"/BloodBank/Request\" exact component={BankRequest} />\n          <Route path=\"/BloodBank/Stock\" exact component={BankStock} />\n          <Route path=\"/BloodBank/Profile\" exact component={BankProfile} />\n\n    \n          <Route path=\"/Donor\" exact component={DonorDonations} />\n          <Route path=\"/Donor/Requests\" exact component={DonorRequests} />\n          <Route path=\"/Donor/MakeDonations\" exact component={DonorMakeDonations} />\n          <Route path=\"/Donor/Profile\" exact component={DonorProfile} />\n\n          <Route path=\"/Recipient\" exact component={RecipientSendRequest} />\n          <Route path=\"/Recipient/SendRequest\" exact component={RecipientSendRequest} />\n          <Route path=\"/Recipient/Request\" exact component={RecipientRequests} />\n          <Route path=\"/Recipient/SearchDonor\" exact component={SearchDonor} />\n          <Route path=\"/Recipient/Profile\" exact component={RecipientProfile} />\n\n          <Route path=\"/Admin/Stock\" exact component={AdminStock} />\n          <Route path=\"/Admin/Request\" exact component={AdminRequest} />\n           <Route path=\"/Admin\" exact component={AdminAlert} />\n           <Route path=\"/Admin/Donation\" exact component={AdminManageDonation} />\n       \n          <Route path=\"/Admin/BloodBank\" exact component={AdminBloodBanks} />\n          <Route path=\"/Admin/User\" exact component={AdminDonor} />\n          <Route path=\"/Admin/Recipient\" exact component={AdminRecipient} />\n          <Route path=\"/Admin/BloodBank/ProfileEdit/:id\" exact component = {UpdateBloodBankAdmin} />\n          <Route path=\"/Admin/Users/ProfileEdit/:id\" exact component = {UpdateUsersProfileAdmin} />\n\n\n        </Router>\n        <Footer />\n      </UserContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n\n//        \n\n\n//import './App.css';\n\n\n\n/*\n <Navbar />\n      <SignupBloodBank />\n      <Login/>\n      <LoginAdmin />\n*/","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-Recipient.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\OurVision.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Footer.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Navbar.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankReciever.component.js",["212"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext';\r\nimport Axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n\r\nfunction RenderButtons(props) {\r\n  if (props.status === 'Active') {\r\n    return (\r\n      <td>\r\n        <button type=\"button\" class=\"btn btn-primary\" onClick={props.updateD}>Update</button>\r\n        <br />\r\n        <button type=\"button\" class=\"btn btn-danger\" onClick={props.deleteD}>Delete</button>\r\n      </td>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <td>\r\n    </td>\r\n  )\r\n}\r\n\r\n\r\nfunction RecipientRow(props) {\r\n\r\n  const history = useHistory();\r\n\r\n  const deleteRecipient = async () => {\r\n    await Axios.delete(`http://localhost:5000/login/deleteBloodBank/${props.recipient_id}`)\r\n    console.log(\"deleted\");\r\n    Swal.fire(\r\n      'Deleted',\r\n      'Awww! Sad to See You Go.',\r\n      'success'\r\n    )\r\n    props.update();\r\n  }\r\n\r\n  const updateRecipient = (e) => {\r\n    e.preventDefault();\r\n    history.push('/BloodBank/ProfileEdit/' + props.recipient_id);\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">{props.index}</th>\r\n      <td>{props.recipient.name}</td>\r\n      <td>{props.recipient.age} </td>\r\n      <td>{props.recipient.bloodGroup}</td>\r\n      <td>{props.recipient.address}</td>\r\n      <td>{props.recipient.contact}</td>\r\n      <td>{props.recipient.email}</td>\r\n      <td>{props.recipient.status}</td>\r\n      <RenderButtons status={props.recipient.status} deleteD={deleteRecipient} updateD={updateRecipient} />\r\n    </tr>\r\n  )\r\n}\r\n\r\n\r\nfunction BankReciever() {\r\n  //to prevent from loading if user is log out\r\n  const { userLoginData } = useContext(UserContext)\r\n  const history = useHistory();\r\n\r\n  const [isLoading, setLoading] = useState(true);  //for 1st loading data\r\n  const [data, setData] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"BloodBank\")\r\n        history.push(`/${userLoginData.userData.type}`)\r\n\r\n      const getData = async () => {\r\n        const userResponse = await Axios.get(`http://localhost:5000/bloodRequest/getRecipientsForBloodBank/${userLoginData.userData.user_id}`);\r\n\r\n        setData(userResponse.data)\r\n        setLoading(false);\r\n      }\r\n      getData();\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n\r\n  }, [userLoginData])\r\n\r\n  //after deleting data not updating thats why\r\n  const updateState = async () => {\r\n    const userResponse = await Axios.get(`http://localhost:5000/bloodRequest/getRecipientsForBloodBank/${userLoginData.userData.user_id}`);\r\n    setData(userResponse.data)\r\n  }\r\n\r\n  const showRecipients = () => {\r\n    return (\r\n      data.map((currentRecipient, index) => {\r\n        //this is returning single donor row\r\n        return <RecipientRow recipient={currentRecipient} recipient_id={currentRecipient._id} index={index + 1} update={updateState} />\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <BankContainer>\r\n        <div class=\"box\">\r\n          <div class=\"loader\">\r\n            <span class=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </BankContainer>\r\n\r\n    )\r\n  }\r\n\r\n  return (\r\n    <BankContainer>\r\n      <div class=\"body\">\r\n        <h1>Blood Recipients</h1>\r\n        <div className=\"table-responsive\">\r\n          <table class=\"table table-striped\">\r\n            <thead class=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">Recipient NAME</th>\r\n                <th scope=\"col\">AGE</th>\r\n                <th scope=\"col\">BLOOD GROUP</th>\r\n                <th scope=\"col\">ADDRESS</th>\r\n                <th scope=\"col\">CONTACT NO</th>\r\n                <th scope=\"col\">EMAIL</th>\r\n                <th scope=\"col\">STATUS</th>\r\n                <th scope=\"col\">ACTION</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {showRecipients()}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </BankContainer>\r\n  )\r\n}\r\n\r\nexport default BankReciever;\r\n\r\nconst BankContainer = styled.div`\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.btn,\r\nbtn-primary\r\n {\r\n    margin-top: 10px;\r\n    margin-bottom: 25px;\r\n    position: relative;\r\n}\r\n\r\n.btn-primary{\r\n    left: 0px;\r\n    margin-left: 100px;\r\n}\r\n.btn-danger {\r\n    left: 0px;\r\n    margin-top: -90px;\r\n}\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n\r\n`;\r\n","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorProfile.component.js",["213"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\ViewRequest.component.js",["214"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios'\r\n\r\nfunction RecipientRequests() {\r\n  const { userLoginData } = useContext(UserContext)\r\n  const [isLoading, setLoading] = useState(true);\r\n  const history = useHistory();\r\n  const [data, setData] = useState([]);\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"Recipient\")\r\n        history.push(`/${userLoginData.userData.type}`)\r\n\r\n      Axios.get(`http://localhost:5000/bloodRequest/viewRequests/${userLoginData.userData.user_id}`)\r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n\r\n  }, [userLoginData])\r\n  if (isLoading) {\r\n    return (\r\n      <RecipientContainer>\r\n        <div className=\"box\">\r\n          <div className=\"loader\">\r\n            <span className=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </RecipientContainer>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <RecipientContainer>\r\n      <div className=\"body\">\r\n        <h1>Patient Requests</h1>\r\n        <br />\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table table-striped\">\r\n            <thead className=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">RECIPIENT NAME</th>\r\n                <th scope=\"col\">AGE</th>\r\n                <th scope=\"col\">BLOOD GROUP</th>\r\n                <th scope=\"col\">ADDRESS</th>\r\n                <th scope=\"col\">BLOOD BANK</th>\r\n                <th scope=\"col\">QUANTITY</th>\r\n                <th scope=\"col\">STATUS</th>\r\n                <th scope=\"col\">DUE DATE</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.userDetails.map((result, index) => {\r\n                return (\r\n                  <tr>\r\n                    <td>{index + 1}</td>\r\n                    <td>{data.recipient[0].name}</td>\r\n                    <td>{data.recipient[0].age}</td>\r\n                    <td>{result.bloodGroup}</td>\r\n                    <td>{result.address}</td>\r\n                    <td>{data.recipient[0].bloodBank}</td>\r\n                    <td>{result.quantity}</td>\r\n                    <td>{data.status[index]}</td>\r\n                    <td>{(new Date(result.due_date)).toLocaleString().split(',')[0]}</td>\r\n                  </tr>\r\n                )\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </RecipientContainer>\r\n  )\r\n}\r\nexport default RecipientRequests;\r\n\r\nconst RecipientContainer = styled.div`\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\RecipientProfile.component.js",["215"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios'\r\nimport { bloodGroups } from '../../../context/BloodGroupsList';\r\nimport ErrorNotice from '../../misc/ErrorNotice';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n\r\nfunction RecipientProfile() {\r\n\r\n    const [name, setName] = useState();\r\n    const [address, setAddress] = useState();\r\n    const [contact, setContact] = useState();\r\n    const [age, setAge] = useState();\r\n    const [bloodGroup, setBloodGroup] = useState();\r\n    const [username, setUserName] = useState();\r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState();\r\n\r\n    //for error\r\n    const [error, setError] = useState();\r\n\r\n\r\n    const { userLoginData, setUserLoginData } = useContext(UserContext)\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = useState(true);  //for 1st loading data\r\n    let [profileData, setProfileData] = useState();\r\n\r\n    useEffect(() => {\r\n        if (!userLoginData.userData)\r\n            history.push('/')\r\n        try {\r\n            if (userLoginData.userData.type !== \"Recipient\")\r\n                history.push(`/${userLoginData.userData.type}`)\r\n\r\n            const getData = async () => {\r\n                const userResponse = await Axios.get(\"http://localhost:5000/login/profile\", {\r\n                    headers: { \"auth-token\": userLoginData.token }\r\n                });\r\n                setProfileData(userResponse.data)\r\n                setName(userResponse.data.name);\r\n                setAddress(userResponse.data.address)\r\n                setContact(userResponse.data.contact)\r\n                setAge(userResponse.data.age)\r\n                setBloodGroup(userResponse.data.bloodGroup)\r\n                setEmail(userResponse.data.email)\r\n                setUserName(userResponse.data.username)\r\n\r\n                setLoading(false);\r\n            }\r\n            getData();\r\n\r\n        }\r\n        catch {\r\n            history.push('/')\r\n        }\r\n\r\n    }, [userLoginData])\r\n\r\n\r\n    const update = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n\r\n            const updatedUser = { name, address, contact, age, bloodGroup, email };\r\n            await Axios.post(`http://localhost:5000/user/update/${userLoginData.userData.user_id}`, updatedUser);  //user and its login data in diff tables\r\n            const UpdatedLogin = { username, password }\r\n            await Axios.post(`http://localhost:5000/login/update/${userLoginData.userData.id}`, UpdatedLogin);  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Good job!',\r\n                'Your Profile Updated Successfully',\r\n                'success'\r\n            ) //user and its login data in diff tables\r\n\r\n\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    };\r\n\r\n\r\n    const unregister = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            await Axios.delete(`http://localhost:5000/login/delete`,\r\n                {\r\n                    headers: { \"auth-token\": userLoginData.token }\r\n                });  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Deleted',\r\n                'Awww! Sad to See You Go.',\r\n                'success'\r\n            ) //user and its login data in diff tables\r\n\r\n            setUserLoginData({\r\n                token: undefined,\r\n                userData: undefined,\r\n            });\r\n            localStorage.setItem(\"auth-token\", \"\");\r\n            history.push(\"/\")\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <RecipientProfileContainer>\r\n                <div class=\"box\">\r\n                    <div class=\"loader\">\r\n                        <span class=\"back\">\r\n                            <span>L</span>\r\n                            <span>O</span>\r\n                            <span>A</span>\r\n                            <span>D</span>\r\n                            <span>I</span>\r\n                            <span>N</span>\r\n                            <span>G</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </RecipientProfileContainer>\r\n\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <RecipientProfileContainer>\r\n            <div>\r\n                <h1 className=\"heading\">Update Profile:</h1>\r\n                <div className=\"container container-fluid\">\r\n                    <div className=\"d-flex justify-content-center h-100\">\r\n                        <div class=\"card signupCard\">\r\n                            <div className=\"card-body\">\r\n                                <h3>Profile</h3>\r\n                                {error && (\r\n                                    <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                                )}\r\n                                <form>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"bloodBankName\" >Name: </label>\r\n                                        <input id=\"bloodBankName\" type=\"text\" value={name} className=\"form-control\"\r\n                                            onChange={(e) => setName(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"bloodGroup\" >Blood Group: </label>\r\n                                        <select value={bloodGroup} id=\"bloodGroup\" className=\"form-control\" onChange={(e) => setBloodGroup(e.target.value)}>\r\n                                            {bloodGroups.map(item => {\r\n                                                return (\r\n                                                    <option value={item}> {item} </option>\r\n                                                )\r\n                                            })}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankAddress\" >Address: </label>\r\n                                        <input id=\"BloodBankAddress\" value={address} type=\"text\" className=\"form-control\"\r\n                                            onChange={(e) => setAddress(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankContact\" >Contact No: </label>\r\n                                        <input id=\"BloodBankContact\" type=\"text\" className=\"form-control\"\r\n                                            value={contact} onChange={(e) => setContact(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"age\" >Age: </label>\r\n                                        <input id=\"age\" type=\"text\" className=\"form-control\"\r\n                                            value={age} onChange={(e) => setAge(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankUsername\" >Username: </label>\r\n                                        <input id=\"BloodBankUsername\" type=\"text\" className=\"form-control\"\r\n                                            value={username} onChange={(e) => setUserName(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankEmail\" >Email: </label>\r\n                                        <input id=\"BloodBankEmail\" type=\"text\" className=\"form-control\"\r\n                                            value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankPassword\" >Blood Bank: </label>\r\n                                        <input id=\"BloodBankPassword\" type=\"text\" className=\"form-control\"\r\n                                            value={profileData.bloodBank} readonly />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankPassword\" >Password: </label>\r\n                                        <input id=\"BloodBankPassword\" type=\"password\" className=\"form-control\"\r\n                                            onChange={(e) => setPassword(e.target.value)} />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Unregister\" className=\"btn float-right unregister_btn\" onClick={unregister} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Update\" className=\"btn float-right update_btn\" onClick={update} />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </RecipientProfileContainer>\r\n    )\r\n\r\n}\r\n\r\nexport default RecipientProfile;\r\n\r\nconst RecipientProfileContainer = styled.div`\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Righteous&display=swap');\r\n\r\nhtml,body{\r\nheight: 100%;\r\n}\r\n\r\n.spinnerl{\r\n    padding-top:150px;\r\n    padding-bottom:150px;\r\n    \r\n}\r\n\r\nlabel {\r\npadding-right: 20px;\r\n}\r\n.container{\r\nheight: 100%;\r\nalign-content: center;\r\npadding-top: 50px;\r\nfont-family: 'Righteous', cursive;\r\n}\r\n\r\n.signupCard{\r\nheight: 650px;\r\nalign-content: center;\r\nmargin: auto;\r\nwidth: 500px;\r\nbackground-color: rgba(15, 74, 92, 0.473) ;\r\n}\r\n\r\n.card-header {\r\nbackground-color: white;\r\n}\r\n.card-body h3{\r\ncolor: white;\r\ntext-align:center;\r\npadding-bottom:5px;\r\n}\r\n#blood{\r\n    width:75%;\r\n    border:none;\r\n}\r\n\r\n.update_btn{\r\ncolor: black;\r\nbackground-color: #FFC312;\r\nwidth: 100px;\r\nmargin: 0 40px;\r\n}\r\n\r\n.update_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.unregister_btn{\r\n    color: white;\r\n    background-color: #e02525;\r\n    width: 100px;\r\n    margin: 0 40px;\r\n}\r\n    \r\n.unregister_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.ButtonGroup {\r\n    margin: auto;\r\n    justify-content: center;\r\n}\r\n.heading{\r\n    padding-top:5%;\r\n    padding-left:30%\r\n}\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n`\r\n\r\n","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Header.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\authButtonOptions.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataRecipient.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\index.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankDonor.component.js",["216"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext';\r\nimport Axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\n\r\nfunction RenderButtons(props) {\r\n  if (props.status === 'Active') {\r\n    return (\r\n      <td>\r\n        <button type=\"button\" class=\"btn btn-primary\" onClick={props.updateD}>Update</button>\r\n        <br />\r\n        <button type=\"button\" class=\"btn btn-danger\" onClick={props.deleteD}>Delete</button>\r\n      </td>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <td>\r\n    </td>\r\n  )\r\n}\r\n\r\n\r\nfunction DonorRow(props) {\r\n\r\n  const history = useHistory();\r\n\r\n  const deleteDonor = async () => {\r\n    await Axios.delete(`http://localhost:5000/login/deleteBloodBank/${props.donor_id}`)\r\n    console.log(\"deleted\");\r\n    Swal.fire(\r\n      'Deleted',\r\n      'Awww! Sad to See You Go.',\r\n      'success'\r\n    )\r\n    props.update();\r\n  }\r\n\r\n  const updateDonor = (e) => {\r\n    e.preventDefault();\r\n    history.push('/BloodBank/ProfileEdit/' + props.donor_id);\r\n  }\r\n\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">{props.index}</th>\r\n      <td>{props.donor.name}</td>\r\n      <td>{props.donor.age} </td>\r\n      <td>{props.donor.bloodGroup}</td>\r\n      <td>{props.donor.address}</td>\r\n      <td>{props.donor.contact}</td>\r\n      <td>{props.donor.email}</td>\r\n      <td>{props.donor.status}</td>\r\n      <RenderButtons status={props.donor.status} deleteD={deleteDonor} updateD={updateDonor} />\r\n    </tr>\r\n  )\r\n}\r\n\r\n\r\nfunction BankDonor() {\r\n  //to prevent from loading if user is log out\r\n  const { userLoginData } = useContext(UserContext)\r\n  const history = useHistory();\r\n\r\n  const [isLoading, setLoading] = useState(true);  //for 1st loading data\r\n  const [data, setData] = useState([]);\r\n\r\n\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"BloodBank\")\r\n        history.push(`/${userLoginData.userData.type}`)\r\n\r\n      const getData = async () => {\r\n        const userResponse = await Axios.get(`http://localhost:5000/bloodRequest/getDonorsForBloodBank/${userLoginData.userData.user_id}`);\r\n\r\n        setData(userResponse.data)\r\n        setLoading(false);\r\n      }\r\n      getData();\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n\r\n  }, [userLoginData])\r\n\r\n  //after deleting data not updating thats why\r\n  const updateState = async () => {\r\n    const userResponse = await Axios.get(`http://localhost:5000/bloodRequest/getDonorsForBloodBank/${userLoginData.userData.user_id}`);\r\n    setData(userResponse.data)\r\n  }\r\n\r\n  const showDonors = () => {\r\n    return (\r\n      data.map((currentDonor, index) => {\r\n        //this is returning single donor row\r\n        return <DonorRow donor={currentDonor} donor_id={currentDonor._id} index={index + 1} update={updateState} />\r\n      })\r\n    )\r\n  }\r\n\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <BankContainer>\r\n        <div className=\"box\">\r\n          <div className=\"loader\">\r\n            <span className=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </BankContainer>\r\n\r\n    )\r\n  }\r\n\r\n  return (\r\n    <BankContainer>\r\n      <div class=\"body\">\r\n        <h1>Blood Donors</h1>\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table table-striped\">\r\n            <thead className=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">DONOR NAME</th>\r\n                <th scope=\"col\">AGE</th>\r\n                <th scope=\"col\">BLOOD GROUP</th>\r\n                <th scope=\"col\">ADDRESS</th>\r\n                <th scope=\"col\">CONTACT NO</th>\r\n                <th scope=\"col\">EMAIL</th>\r\n                <th scope=\"col\">STATUS</th>\r\n                <th scope=\"col\">ACTION</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {showDonors()}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </BankContainer>\r\n  )\r\n}\r\n\r\nexport default BankDonor;\r\n\r\nconst BankContainer = styled.div`\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.btn,\r\nbtn-primary\r\n {\r\n    margin-top: 10px;\r\n    margin-bottom: 25px;\r\n    position: relative;\r\n}\r\n\r\n.btn-primary{\r\n    left: 0px;\r\n    margin-left: 100px;\r\n}\r\n.btn-danger {\r\n    left: 0px;\r\n    margin-top: -90px;\r\n}\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\updateProfileUsersAdmin.js",["217"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\context\\BloodGroupsList.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Sidebar.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminManageDonation.component.js",["218","219","220"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios';\r\nimport Swal from 'sweetalert2';\r\n\r\n\r\nfunction RenderButtons(props) {\r\n  if (props.status === 'Active') {\r\n    return (\r\n      <td>\r\n        <button type=\"button\" class=\"btn btn-primary\" onClick={props.updateD}>Update</button>\r\n        <br />\r\n        <button type=\"button\" class=\"btn btn-danger\" onClick={props.deleteD}>Delete</button>\r\n      </td>\r\n    )\r\n  }\r\n}\r\n\r\nfunction AdminManageDonation() {\r\n  //to prevent from loading if user is log out\r\n  const { userLoginData } = useContext(UserContext)\r\n  const history = useHistory();\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      // if (userLoginData.userData.type !== \"BloodBank\")  //to prevent accessing any other type\r\n      // history.push(`/${userLoginData.userData.type}`)\r\n      history.push(\"/Admin/Donation\");\r\n      Axios.get(\"http://localhost:5000/bloodBag/getAdminBags\")\r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n  }, [userLoginData])\r\n\r\n\r\n  // const deleteDonation = async (del) => {\r\n  //  //  alert(`${del}`);\r\n  //   await Axios.get(`http://localhost:5000/bloodBag/deleteDonation/${del}`)\r\n  //   console.log(\"deleted\");\r\n  //   Swal.fire(\r\n  //     'Deleted',\r\n  //     'success'\r\n  // )\r\n  // await Axios.get(\"http://localhost:5000/bloodBag/getAdminBags\")\r\n  // .then((response) => {\r\n  //   setData(response.data);})\r\n\r\n  // } \r\n\r\n\r\n  if (isLoading) {\r\n    return (\r\n\r\n      <AdminContainer>\r\n        <div class=\"box\">\r\n          <div class=\"loader\">\r\n            <span class=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </AdminContainer>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <AdminContainer>\r\n      <div class=\"body\">\r\n        <h1>Blood Donations</h1>\r\n\r\n\r\n        <table class=\"table table-striped\">\r\n          <thead class=\"thead\">\r\n            <tr>\r\n              <th scope=\"col\">ID</th>\r\n              <th scope=\"col\">BLOOD GROUP</th>\r\n              <th scope=\"col\">DATE DONATED</th>\r\n              <th scope=\"col\">BLOOD BANK</th>\r\n              <th scope=\"col\">QUANTITY</th>\r\n\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.map((result, index) => {\r\n              return (\r\n                <tr>\r\n                  <td>{index + 1}</td>\r\n                  <td>{result.bloodGroup}</td>\r\n                  <td>{(new Date(result.dateDonated).toLocaleString().split(',')[0])}</td>\r\n                  <td>{result.name}</td>\r\n                  <td>{result.quantity}</td>\r\n                </tr>\r\n\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </AdminContainer>\r\n  )\r\n}\r\n\r\nexport default AdminManageDonation;\r\n\r\nconst AdminContainer = styled.div`\r\n.spinnerl{\r\n  padding-top:150px;\r\n  padding-bottom:150px; \r\n}\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.Bottom{\r\n  padding-left:70%;  \r\n}\r\nh2{\r\n    color:#6B1A08;\r\n    padding-left:65%;\r\n    font-weight:bold;\r\n}\r\nh6{\r\n    padding-left:60%;   \r\n}\r\ninput{\r\n    text-align:center;\r\n    width:40%;\r\n}\r\n\r\n.btn,\r\nbtn-primary\r\n {\r\n    margin-top: 10px;\r\n    margin-bottom: 25px;\r\n    position: relative;\r\n}\r\n\r\n.btn-primary{\r\n    left: 0px;\r\n    margin-left: 100px;\r\n}\r\n.btn-danger {\r\n    left: 0px;\r\n    margin-top: -90px;\r\n}\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminRequests.component.js",["221","222","223","224"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios';\r\nimport { bloodGroups } from '../../../context/BloodGroupsList';\r\nimport Swal from 'sweetalert2';\r\n\r\nfunction AdminStock() {\r\n  //to prevent from loading if user is log out\r\n  const { userLoginData } = useContext(UserContext)\r\n  const history = useHistory();\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      // if (userLoginData.userData.type !== \"BloodBank\")  //to prevent accessing any other type\r\n      // history.push(`/${userLoginData.userData.type}`)\r\n      history.push(\"/Admin/Request\");\r\n      Axios.get(\"http://localhost:5000/bloodRequest/getAdminRequest\")\r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n  }, [userLoginData])\r\n\r\n  const deleteRequest = async (del) => {\r\n    //  alert(`${del}`);\r\n    await Axios.get(`http://localhost:5000/bloodRequest/deleteRequest/${del}`)\r\n    console.log(\"deleted\");\r\n    Swal.fire(\r\n      'Deleted',\r\n      'success'\r\n    )\r\n    await Axios.get(\"http://localhost:5000/bloodRequest/getAdminRequest\")\r\n      .then((response) => {\r\n        setData(response.data);\r\n      })\r\n\r\n  }\r\n  if (isLoading) {\r\n    return (\r\n\r\n      <AdminContainer>\r\n        <div class=\"box\">\r\n          <div class=\"loader\">\r\n            <span class=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </AdminContainer>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <AdminContainer>\r\n      <div class=\"body\">\r\n        <h1>Blood Requests</h1>\r\n\r\n        <div className=\"table-responsive\">\r\n          <table class=\"table table-striped\">\r\n            <thead class=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">RECIPIENT NAME</th>\r\n                <th scope=\"col\">BLOOD GROUP</th>\r\n                <th scope=\"col\">DATE REQUESTED</th>\r\n                <th scope=\"col\">BLOOD BANK</th>\r\n                <th scope=\"col\">ADDRESS</th>\r\n                <th scope=\"col\">QUANTITY</th>\r\n                <th scope=\"col\">STATUS</th>\r\n                <th scope=\"col\">ACTION</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.map((result, index) => {\r\n                return (\r\n                  <tr>\r\n                    <td>{index + 1}</td>\r\n                    <td>{result.name}</td>\r\n                    <td>{result.bloodGroup}</td>\r\n                    <td>{(new Date(result.dateDonated).toLocaleString().split(',')[0])}</td>\r\n                    <td>{result.bloodBank}</td>\r\n                    <td>{result.address}</td>\r\n                    <td>{result.quantity}</td>\r\n                    <td>{result.status}</td>\r\n                    <td><button type=\"button\" class=\"btn btn-danger\" onClick={() => deleteRequest(result.id)}>Delete</button></td>\r\n                  </tr>\r\n\r\n                )\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </AdminContainer>\r\n  )\r\n}\r\n\r\nexport default AdminStock;\r\n\r\nconst AdminContainer = styled.div`\r\n.spinnerl{\r\n  padding-top:150px;\r\n  padding-bottom:150px; \r\n}\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.Bottom{\r\n  padding-left:70%;  \r\n}\r\nh2{\r\n    color:#6B1A08;\r\n    padding-left:65%;\r\n    font-weight:bold;\r\n}\r\nh6{\r\n    padding-left:60%;   \r\n}\r\ninput{\r\n    text-align:center;\r\n    width:40%;\r\n}\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankStock.component.js",["225","226","227"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios';\r\nimport { bloodGroups } from '../../../context/BloodGroupsList';\r\n\r\nexport default function BankStock() {\r\n  //to prevent from loading if user is log out\r\n  const { userLoginData } = useContext(UserContext)\r\n  const history = useHistory();\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n\r\n  function countQuantity() {\r\n    var c = 0;\r\n    for (var i = 0; i < data.bank.length; i++) {\r\n      c = c + data.bank[i].quantity;\r\n    }\r\n    return c;\r\n  }\r\n  function countAll() {\r\n    var c = 0;\r\n    for (var i = 0; i < data.bank.length; i++) {\r\n      if (search == '') {\r\n        c = 0;\r\n      }\r\n      if (data.bank[i].bloodGroup == search) { c = c + data.bank[i].quantity; }\r\n    }\r\n    return c;\r\n  }\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"BloodBank\")  //to prevent accessing any other type\r\n        history.push(`/${userLoginData.userData.type}`)\r\n\r\n      Axios.get(`http://localhost:5000/bloodBag/getBags/${userLoginData.userData.user_id}`)\r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n  }, [userLoginData])\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <BankContainer>\r\n        <div class=\"box\">\r\n          <div class=\"loader\">\r\n            <span class=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </BankContainer>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <BankContainer>\r\n      <div class=\"body\">\r\n        <h1>Blood Stock</h1>\r\n\r\n        <div className=\"table-responsive\">\r\n          <table class=\"table table-striped\">\r\n            <thead class=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">BLOOD GROUP</th>\r\n                <th scope=\"col\">DATE DONATED</th>\r\n                <th scope=\"col\">QUANTITY</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.bank.map((result, index) => {\r\n                return (\r\n                  <tr>\r\n                    <td>{index + 1}</td>\r\n                    <td>{result.bloodGroup}</td>\r\n                    <td>{(new Date(result.created_at).toLocaleString().split(',')[0])}</td>\r\n                    <td>{result.quantity}</td>\r\n                  </tr>\r\n\r\n                )\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        <h6>Total Quantity:  <input type=\"text\" id=\"myText\" value={countQuantity()} /></h6>\r\n        <h2>Blood Quantity</h2>\r\n        <div className=\"Bottom\">\r\n          <h5>Select Blood Group:</h5>\r\n          <select id=\"blood\" className=\"selectB\" name=\"bloodGroup\" onChange={(event) => { setSearch(event.target.value) }}>\r\n            <option> </option>\r\n            {bloodGroups.map(item => {\r\n              return (\r\n                <option value={item}>{item}</option>\r\n              )\r\n            })}\r\n          </select>\r\n          <br />\r\n          <input type=\"text\"\r\n            id=\"myText\"\r\n            value={countAll()} />\r\n        </div>\r\n      </div>\r\n    </BankContainer>\r\n  )\r\n}\r\n\r\nconst BankContainer = styled.div`\r\n.spinnerl{\r\n  padding-top:150px;\r\n  padding-bottom:150px; \r\n}\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.Bottom{\r\n  padding-left:70%;  \r\n}\r\nh2{\r\n    color:#6B1A08;\r\n    padding-left:65%;\r\n    font-weight:bold;\r\n}\r\nh6{\r\n    padding-left:60%;   \r\n}\r\ninput{\r\n    text-align:center;\r\n    width:40%;\r\n}\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SearchDonor.component.js",["228","229"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext';\r\nimport Axios from 'axios';\r\nimport { bloodGroups } from '../../../context/BloodGroupsList';\r\n\r\nfunction SearchDonor() {\r\n  const { userLoginData } = useContext(UserContext)\r\n  const [isLoading, setLoading] = useState(true);\r\n  const history = useHistory();\r\n  const [data, setData] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"Recipient\")\r\n        history.push(`/${userLoginData.userData.type}`)\r\n\r\n      Axios.get(`http://localhost:5000/bloodRequest/getAllDonors/${userLoginData.userData.user_id}`)\r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n\r\n  }, [userLoginData])\r\n  if (isLoading) {\r\n    return (\r\n      <RecipientContainer>\r\n        <div className=\"box\">\r\n          <div className=\"loader\">\r\n            <span className=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </RecipientContainer>\r\n    )\r\n  }\r\n  return (\r\n    <RecipientContainer>\r\n      <div className=\"body\">\r\n        <h1>Search Donors</h1>\r\n        <div className=\"search-donor\">\r\n          <h5>Search Blood Group:\r\n            <select id=\"blood\" className=\"selectB\" name=\"bloodGroup\" onChange={(event) => { setSearch(event.target.value) }} >\r\n              <option></option>\r\n              {bloodGroups.map(item => {\r\n                return (\r\n                  <option value={item}>{item}</option>\r\n                )\r\n              })}\r\n            </select>\r\n          </h5>\r\n          <p id=\"demo\"></p>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table table-striped\" id=\"myTable\">\r\n            <thead className=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">DONOR NAME</th>\r\n                <th scope=\"col\">EMAIL</th>\r\n                <th scope=\"col\">AGE</th>\r\n                <th scope=\"col\">BLOOD GROUP</th>\r\n                <th scope=\"col\">ADDRESS</th>\r\n                <th scope=\"col\">CONTACT</th>\r\n                <th scope=\"col\">BLOOD BANK</th>\r\n\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.donor.filter((val) => {\r\n                if (search === \"\") {\r\n                  return val;\r\n                } else {\r\n\r\n                  if (val.bloodGroup === search) {\r\n                    return val;\r\n                  }\r\n                }\r\n              }).map((result, index) => {\r\n\r\n                return (\r\n                  <tr>\r\n                    <td>{index + 1}</td>\r\n                    <td>{result.name}</td>\r\n                    <td>{result.email}</td>\r\n                    <td>{result.age}</td>\r\n                    <td>{result.bloodGroup}</td>\r\n                    <td>{result.address}</td>\r\n                    <td>{result.contact}</td>\r\n                    <td>{result.bloodBank}</td>\r\n                  </tr>\r\n\r\n                )\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </RecipientContainer>\r\n  )\r\n}\r\n\r\nexport default SearchDonor;\r\n\r\nconst RecipientContainer = styled.div`\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.search-donor{\r\n  padding-left:50%; \r\n}\r\n\r\n\r\n#blood{\r\n    space-between:evenly;\r\n}\r\nh2{\r\n    color:#6B1A08;\r\n    padding-left:65%;\r\n    font-weight:bold;\r\n}\r\n\r\nh5{\r\n  padding-right: 5rem;\r\n}\r\n\r\nh6{\r\n    padding-left:60%;   \r\n}\r\ninput{\r\n    text-align:center;\r\n    width:40%;\r\n}\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorRequests.component.js",["230","231"],"import React, { Component } from 'react';\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios';\r\nfunction DonorRequests() {\r\n\r\n  const { userLoginData } = useContext(UserContext)\r\n  const history = useHistory();\r\n  const [data, setData] = useState([]);\r\n  const [isLoading, setLoading] = useState(true);\r\n  //  let recData=[];\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"Donor\")\r\n        history.push(`/${userLoginData.userData.type}`)\r\n      Axios.get(`http://localhost:5000/bloodRequest/getAllRec/${userLoginData.userData.user_id}`)\r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n\r\n  }, [userLoginData])\r\n  if (isLoading) {\r\n    return (\r\n      <DonorRequestsContainer>\r\n        <div className=\"box\">\r\n          <div className=\"loader\">\r\n            <span className=\"back\">\r\n              <span>L</span>\r\n              <span>O</span>\r\n              <span>A</span>\r\n              <span>D</span>\r\n              <span>I</span>\r\n              <span>N</span>\r\n              <span>G</span>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </DonorRequestsContainer>\r\n    )\r\n  }\r\n  return (\r\n    <DonorRequestsContainer>\r\n      <div className=\"body\">\r\n        <h1>Requests</h1>\r\n        <div className=\"table-responsive\">\r\n          <table className=\"table table-striped\">\r\n            <thead className=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">RECIPIENT NAME</th>\r\n                <th scope=\"col\">BLOOD GROUP</th>\r\n                <th scope=\"col\">DUE DATE</th>\r\n                <th scope=\"col\">CONTACT NO</th>\r\n                <th scope=\"col\">QUANTITY</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {data.map((result, index) => {\r\n                return (\r\n                  <tr>\r\n                    <td>{index + 1}</td>\r\n                    <td>{result.name}</td>\r\n                    <td>{result.bloodGroup}</td>\r\n                    <td>{(new Date(result.dueDate)).toLocaleString().split(',')[0]}</td>\r\n                    <td>{result.contact}</td>\r\n                    <td>{result.quantity}</td>\r\n                  </tr>\r\n\r\n                )\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </DonorRequestsContainer>\r\n  )\r\n}\r\nexport default DonorRequests;\r\n\r\nconst DonorRequestsContainer = styled.div`\r\n\r\n.spinnerl{\r\n  padding-top:150px;\r\n  padding-bottom:150px;\r\n  \r\n}\r\n\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\context\\userDetailContext.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\updateProfile.js",["232"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\misc\\AlertNotice.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Admin\\AdminManageBloodBanks.component.js",["233"],"import React, { useEffect, useContext, useState } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext';\r\nimport Axios from 'axios';\r\n\r\nfunction RenderButtons(props) {\r\n    if (props.status === 'Active') {\r\n        return (\r\n            <td>\r\n                <button type=\"button\" class=\"btn btn-primary\" onClick={props.updateD}>Update</button>\r\n            </td>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <td>\r\n        </td>\r\n    )\r\n}\r\n\r\n\r\nfunction BankRow(props) {\r\n\r\n    const history = useHistory();\r\n\r\n    const updateBank = (e) => {\r\n        e.preventDefault();\r\n        history.push('/Admin/BloodBank/ProfileEdit/' + props.bank_id);\r\n    }\r\n\r\n    return (\r\n        <tr>\r\n            <th scope=\"row\">{props.index}</th>\r\n            <td>{props.bank.name}</td>\r\n            <td>{props.bank.address}</td>\r\n            <td>{props.bank.contact}</td>\r\n            <td>{props.bank.email}</td>\r\n            <td>{props.bank.status}</td>\r\n            <RenderButtons status={props.bank.status} updateD={updateBank} />\r\n        </tr>\r\n    )\r\n}\r\n\r\n\r\nfunction AdminBloodBanks() {\r\n    //to prevent from loading if user is log out\r\n    const { userLoginData } = useContext(UserContext)\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = useState(true);  //for 1st loading data\r\n    const [data, setData] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userLoginData.userData)\r\n            history.push('/')\r\n        try {\r\n            if (userLoginData.userData.type !== \"Admin\")\r\n                history.push(`/${userLoginData.userData.type}`)\r\n\r\n            const getData = async () => {\r\n                const userResponse = await Axios.get(\"http://localhost:5000/bloodRequest/getAdminBanks\");\r\n\r\n                setData(userResponse.data)\r\n                setLoading(false);\r\n            }\r\n            getData();\r\n        }\r\n        catch {\r\n            history.push('/')\r\n        }\r\n\r\n    }, [userLoginData])\r\n\r\n    //after deleting data not updating thats why\r\n    const updateState = async () => {\r\n        const userResponse = await Axios.get(\"http://localhost:5000/bloodRequest/getAdminBanks\");\r\n        setData(userResponse.data)\r\n    }\r\n\r\n    const showBanks = () => {\r\n        return (\r\n            data.map((currentBank, index) => {\r\n                //this is returning single donor row\r\n                return <BankRow bank={currentBank} bank_id={currentBank._id} index={index + 1} update={updateState} />\r\n            })\r\n        )\r\n    }\r\n\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <AdminBankContainer>\r\n                <div class=\"box\">\r\n                    <div class=\"loader\">\r\n                        <span class=\"back\">\r\n                            <span>L</span>\r\n                            <span>O</span>\r\n                            <span>A</span>\r\n                            <span>D</span>\r\n                            <span>I</span>\r\n                            <span>N</span>\r\n                            <span>G</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </AdminBankContainer>\r\n\r\n        )\r\n    }\r\n\r\n    return (\r\n        <AdminBankContainer>\r\n            <div class=\"body\">\r\n                <h1>Blood Banks</h1>\r\n                <div className=\"table-responsive\">\r\n                    <table class=\"table table-striped\">\r\n                        <thead class=\"thead\">\r\n                            <tr>\r\n                                <th scope=\"col\">ID</th>\r\n                                <th scope=\"col\">BANK NAME</th>\r\n                                <th scope=\"col\">ADDRESS</th>\r\n                                <th scope=\"col\">CONTACT NO</th>\r\n                                <th scope=\"col\">EMAIL</th>\r\n                                <th scope=\"col\">STATUS</th>\r\n                                <th scope=\"col\">ACTION</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {showBanks()}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </AdminBankContainer>\r\n    )\r\n}\r\n\r\nexport default AdminBloodBanks;\r\n\r\nconst AdminBankContainer = styled.div`\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.btn,\r\nbtn-primary\r\n {\r\n    margin-top: 10px;\r\n    margin-bottom: 25px;\r\n    position: relative;\r\n}\r\n\r\n\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n\r\n`;",{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","replacedBy":"237"},{"ruleId":"234","replacedBy":"238"},{"ruleId":"236","replacedBy":"239"},{"ruleId":"240","severity":1,"message":"241","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"244","severity":1,"message":"245","line":42,"column":6,"nodeType":"246","endLine":42,"endColumn":21,"suggestions":"247"},{"ruleId":"240","severity":1,"message":"248","line":28,"column":10,"nodeType":"242","messageId":"243","endLine":28,"endColumn":21},{"ruleId":"244","severity":1,"message":"245","line":57,"column":8,"nodeType":"246","endLine":57,"endColumn":23,"suggestions":"249"},{"ruleId":"250","severity":1,"message":"251","line":336,"column":1,"nodeType":"252","messageId":"253","endLine":344,"endColumn":29},{"ruleId":"244","severity":1,"message":"245","line":96,"column":6,"nodeType":"246","endLine":96,"endColumn":21,"suggestions":"254"},{"ruleId":"234","replacedBy":"255"},{"ruleId":"236","replacedBy":"256"},{"ruleId":"244","severity":1,"message":"245","line":92,"column":8,"nodeType":"246","endLine":92,"endColumn":23,"suggestions":"257"},{"ruleId":"244","severity":1,"message":"245","line":204,"column":8,"nodeType":"246","endLine":204,"endColumn":23,"suggestions":"258"},{"ruleId":"259","severity":1,"message":"260","line":26,"column":18,"nodeType":"261","messageId":"262","endLine":26,"endColumn":20},{"ruleId":"259","severity":1,"message":"260","line":29,"column":30,"nodeType":"261","messageId":"262","endLine":29,"endColumn":32},{"ruleId":"244","severity":1,"message":"245","line":52,"column":6,"nodeType":"246","endLine":52,"endColumn":21,"suggestions":"263"},{"ruleId":"240","severity":1,"message":"264","line":17,"column":12,"nodeType":"242","messageId":"243","endLine":17,"endColumn":16},{"ruleId":"244","severity":1,"message":"265","line":49,"column":8,"nodeType":"246","endLine":49,"endColumn":23,"suggestions":"266"},{"ruleId":"240","severity":1,"message":"267","line":6,"column":8,"nodeType":"242","messageId":"243","endLine":6,"endColumn":19},{"ruleId":"244","severity":1,"message":"245","line":48,"column":6,"nodeType":"246","endLine":48,"endColumn":21,"suggestions":"268"},{"ruleId":"244","severity":1,"message":"245","line":57,"column":6,"nodeType":"246","endLine":57,"endColumn":21,"suggestions":"269"},{"ruleId":"240","severity":1,"message":"270","line":6,"column":10,"nodeType":"242","messageId":"243","endLine":6,"endColumn":23},{"ruleId":"240","severity":1,"message":"271","line":4,"column":35,"nodeType":"242","messageId":"243","endLine":4,"endColumn":41},{"ruleId":"244","severity":1,"message":"245","line":92,"column":6,"nodeType":"246","endLine":92,"endColumn":21,"suggestions":"272"},{"ruleId":"244","severity":1,"message":"245","line":62,"column":8,"nodeType":"246","endLine":62,"endColumn":23,"suggestions":"273"},{"ruleId":"244","severity":1,"message":"245","line":33,"column":6,"nodeType":"246","endLine":33,"endColumn":21,"suggestions":"274"},{"ruleId":"244","severity":1,"message":"245","line":62,"column":8,"nodeType":"246","endLine":62,"endColumn":23,"suggestions":"275"},{"ruleId":"244","severity":1,"message":"245","line":92,"column":6,"nodeType":"246","endLine":92,"endColumn":21,"suggestions":"276"},{"ruleId":"244","severity":1,"message":"265","line":57,"column":8,"nodeType":"246","endLine":57,"endColumn":23,"suggestions":"277"},{"ruleId":"240","severity":1,"message":"278","line":6,"column":8,"nodeType":"242","messageId":"243","endLine":6,"endColumn":12},{"ruleId":"240","severity":1,"message":"279","line":9,"column":10,"nodeType":"242","messageId":"243","endLine":9,"endColumn":23},{"ruleId":"244","severity":1,"message":"245","line":49,"column":6,"nodeType":"246","endLine":49,"endColumn":21,"suggestions":"280"},{"ruleId":"240","severity":1,"message":"281","line":6,"column":10,"nodeType":"242","messageId":"243","endLine":6,"endColumn":21},{"ruleId":"240","severity":1,"message":"282","line":15,"column":10,"nodeType":"242","messageId":"243","endLine":15,"endColumn":16},{"ruleId":"240","severity":1,"message":"283","line":15,"column":18,"nodeType":"242","messageId":"243","endLine":15,"endColumn":27},{"ruleId":"244","severity":1,"message":"245","line":36,"column":6,"nodeType":"246","endLine":36,"endColumn":21,"suggestions":"284"},{"ruleId":"259","severity":1,"message":"260","line":26,"column":18,"nodeType":"261","messageId":"262","endLine":26,"endColumn":20},{"ruleId":"259","severity":1,"message":"260","line":29,"column":35,"nodeType":"261","messageId":"262","endLine":29,"endColumn":37},{"ruleId":"244","severity":1,"message":"245","line":52,"column":6,"nodeType":"246","endLine":52,"endColumn":21,"suggestions":"285"},{"ruleId":"244","severity":1,"message":"245","line":35,"column":6,"nodeType":"246","endLine":35,"endColumn":21,"suggestions":"286"},{"ruleId":"287","severity":1,"message":"288","line":90,"column":40,"nodeType":"289","messageId":"290","endLine":90,"endColumn":42},{"ruleId":"240","severity":1,"message":"241","line":1,"column":17,"nodeType":"242","messageId":"243","endLine":1,"endColumn":26},{"ruleId":"244","severity":1,"message":"245","line":33,"column":6,"nodeType":"246","endLine":33,"endColumn":21,"suggestions":"291"},{"ruleId":"244","severity":1,"message":"265","line":58,"column":8,"nodeType":"246","endLine":58,"endColumn":23,"suggestions":"292"},{"ruleId":"244","severity":1,"message":"245","line":74,"column":8,"nodeType":"246","endLine":74,"endColumn":23,"suggestions":"293"},"no-native-reassign",["294"],"no-negated-in-lhs",["295"],["294"],["295"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["296"],"'profileData' is assigned a value but never used.",["297"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",["298"],["294"],["295"],["299"],["300"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["301"],"'type' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'history' and 'props.match.params.id'. Either include them or remove the dependency array.",["302"],"'AlertNotice' is defined but never used.",["303"],["304"],"'GrUserManager' is defined but never used.","'Switch' is defined but never used.",["305"],["306"],["307"],["308"],["309"],["310"],"'Swal' is defined but never used.","'RenderButtons' is defined but never used.",["311"],"'bloodGroups' is defined but never used.","'search' is assigned a value but never used.","'setSearch' is assigned a value but never used.",["312"],["313"],["314"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["315"],["316"],["317"],"no-global-assign","no-unsafe-negation",{"desc":"318","fix":"319"},{"desc":"318","fix":"320"},{"desc":"318","fix":"321"},{"desc":"318","fix":"322"},{"desc":"318","fix":"323"},{"desc":"318","fix":"324"},{"desc":"325","fix":"326"},{"desc":"318","fix":"327"},{"desc":"318","fix":"328"},{"desc":"318","fix":"329"},{"desc":"318","fix":"330"},{"desc":"318","fix":"331"},{"desc":"318","fix":"332"},{"desc":"318","fix":"333"},{"desc":"325","fix":"334"},{"desc":"318","fix":"335"},{"desc":"318","fix":"336"},{"desc":"318","fix":"337"},{"desc":"318","fix":"338"},{"desc":"318","fix":"339"},{"desc":"325","fix":"340"},{"desc":"318","fix":"341"},"Update the dependencies array to be: [history, userLoginData]",{"range":"342","text":"343"},{"range":"344","text":"343"},{"range":"345","text":"343"},{"range":"346","text":"343"},{"range":"347","text":"343"},{"range":"348","text":"343"},"Update the dependencies array to be: [history, props.match.params.id, userLoginData]",{"range":"349","text":"350"},{"range":"351","text":"343"},{"range":"352","text":"343"},{"range":"353","text":"343"},{"range":"354","text":"343"},{"range":"355","text":"343"},{"range":"356","text":"343"},{"range":"357","text":"343"},{"range":"358","text":"350"},{"range":"359","text":"343"},{"range":"360","text":"343"},{"range":"361","text":"343"},{"range":"362","text":"343"},{"range":"363","text":"343"},{"range":"364","text":"350"},{"range":"365","text":"343"},[1253,1268],"[history, userLoginData]",[1885,1900],[2564,2579],[2668,2683],[6495,6510],[1579,1594],[1574,1589],"[history, props.match.params.id, userLoginData]",[1453,1468],[1606,1621],[2450,2465],[2146,2161],[1003,1018],[2155,2170],[2383,2398],[2039,2054],[1463,1478],[1234,1249],[1608,1623],[1109,1124],[1048,1063],[1991,2006],[2032,2047]]