[{"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SearchDonor.component.js":"1","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SendRequest.component.js":"2","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorProfile.component.js":"3","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-Recipient.component.js":"4","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Footer.component.js":"5","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Header.component.js":"6","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Navbar.js":"7","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankDonor.component.js":"8","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorRequests.component.js":"9","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\RecipientProfile.component.js":"10","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataDonor.js":"11","E:\\Study\\ReactLearn\\blood-bank-system\\src\\index.js":"12","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\login-form-admin.component.js":"13","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\login-form.component.js":"14","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankRequest.component.js":"15","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorMakeDonations.component.js":"16","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\misc\\ErrorNotice.js":"17","E:\\Study\\ReactLearn\\blood-bank-system\\src\\context\\BloodGroupsList.js":"18","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Sidebar.component.js":"19","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\updateProfile.js":"20","E:\\Study\\ReactLearn\\blood-bank-system\\src\\App.js":"21","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-bloodBank.component.js":"22","E:\\Study\\ReactLearn\\blood-bank-system\\src\\context\\userDetailContext.js":"23","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\ViewRequest.component.js":"24","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataBloodBank.js":"25","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankReciever.component.js":"26","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\OurVision.component.js":"27","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-Donor.component.js":"28","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataRecipient.js":"29"},{"size":3912,"mtime":1611346728524,"results":"30","hashOfConfig":"31"},{"size":5419,"mtime":1611072141826,"results":"32","hashOfConfig":"31"},{"size":12617,"mtime":1611072023343,"results":"33","hashOfConfig":"31"},{"size":9291,"mtime":1610807280518,"results":"34","hashOfConfig":"31"},{"size":2613,"mtime":1610465721522,"results":"35","hashOfConfig":"31"},{"size":1900,"mtime":1610387672585,"results":"36","hashOfConfig":"31"},{"size":940,"mtime":1610043390166,"results":"37","hashOfConfig":"31"},{"size":5852,"mtime":1611361301310,"results":"38","hashOfConfig":"31"},{"size":2951,"mtime":1610913946499,"results":"39","hashOfConfig":"31"},{"size":12353,"mtime":1611355919557,"results":"40","hashOfConfig":"31"},{"size":830,"mtime":1610387672742,"results":"41","hashOfConfig":"31"},{"size":170,"mtime":1609836443361,"results":"42","hashOfConfig":"31"},{"size":2446,"mtime":1610111827645,"results":"43","hashOfConfig":"31"},{"size":4086,"mtime":1610803640036,"results":"44","hashOfConfig":"31"},{"size":3942,"mtime":1610388863203,"results":"45","hashOfConfig":"31"},{"size":4473,"mtime":1610825569829,"results":"46","hashOfConfig":"31"},{"size":894,"mtime":1610059042726,"results":"47","hashOfConfig":"31"},{"size":75,"mtime":1610656724647,"results":"48","hashOfConfig":"31"},{"size":3317,"mtime":1610387672731,"results":"49","hashOfConfig":"31"},{"size":8036,"mtime":1611361902725,"results":"50","hashOfConfig":"31"},{"size":5747,"mtime":1611359800379,"results":"51","hashOfConfig":"31"},{"size":6967,"mtime":1610111934776,"results":"52","hashOfConfig":"31"},{"size":204,"mtime":1609960937164,"results":"53","hashOfConfig":"31"},{"size":2999,"mtime":1611399244232,"results":"54","hashOfConfig":"31"},{"size":987,"mtime":1610112399892,"results":"55","hashOfConfig":"31"},{"size":5968,"mtime":1611361653667,"results":"56","hashOfConfig":"31"},{"size":2196,"mtime":1610742548164,"results":"57","hashOfConfig":"31"},{"size":9266,"mtime":1610827992642,"results":"58","hashOfConfig":"31"},{"size":965,"mtime":1611003723663,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"63"},"1ngak6v",{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"63"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"63"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SearchDonor.component.js",["126","127","128","129"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext';\r\nimport Axios from 'axios';\r\nimport { bloodGroups } from '../../../context/BloodGroupsList';\r\n\r\nfunction SearchDonor() {\r\n  const { userLoginData } = useContext(UserContext)\r\n  const [isLoading, setLoading] = useState(true);\r\n  const history = useHistory();\r\n  const [data, setData] = useState([]);\r\n  const [search, setSearch] = useState('');\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"Recipient\")\r\n        history.push(`/${userLoginData.userData.type}`)\r\n\r\n      Axios.get(\"http://localhost:5000/bloodRequest/getAllDonors\") \r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n\r\n  }, [userLoginData])\r\n  if (isLoading) {\r\n    return (\r\n\r\n      <div class=\"d-flex justify-content-center\">\r\n        <div class=\"spinner-border text-danger\" role=\"status\" >\r\n          <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n      </div>\r\n\r\n    )\r\n  }\r\n  return (\r\n    <RecipientContainer>\r\n      <div class=\"body\">\r\n        <h1>Search Donors</h1>\r\n        <div className=\"search-donor\">\r\n          <h5>Search Blood Group:   \r\n            <select id=\"blood\" className=\"selectB\" name=\"bloodGroup\" onChange={(event) => { setSearch(event.target.value) }} >\r\n              <option></option>\r\n              {bloodGroups.map(item => {\r\n                return (\r\n                  <option value={item}>{item}</option>\r\n                )\r\n              })}\r\n            </select>\r\n          </h5>\r\n          <p id=\"demo\"></p>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <table class=\"table table-striped\" id=\"myTable\">\r\n          <thead class=\"thead\">\r\n            <tr>\r\n              <th scope=\"col\">ID</th>\r\n              <th scope=\"col\">DONOR NAME</th>\r\n              <th scope=\"col\">EMAIL</th>\r\n              <th scope=\"col\">AGE</th>\r\n              <th scope=\"col\">BLOOD GROUP</th>\r\n              <th scope=\"col\">ADDRESS</th>\r\n              <th scope=\"col\">CONTACT</th>\r\n              <th scope=\"col\">BLOOD BANK</th>\r\n\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.donor.filter((val) => {\r\n              if (search == \"\") {\r\n                return val;\r\n              } else {\r\n\r\n                if (val.bloodGroup == search) {\r\n                  return val;\r\n                }\r\n              }\r\n            }).map((result, index) => {\r\n\r\n              return (\r\n                <tr>\r\n                  <td>{index + 1}</td>\r\n                  <td>{result.name}</td>\r\n                  <td>{result.email}</td>\r\n                  <td>{result.age}</td>\r\n                  <td>{result.bloodGroup}</td>\r\n                  <td>{result.address}</td>\r\n                  <td>{result.contact}</td>\r\n                  <td>{result.bloodBank}</td>\r\n                </tr>\r\n\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </RecipientContainer>\r\n  )\r\n}\r\n\r\nexport default SearchDonor;\r\n\r\nconst RecipientContainer = styled.div`\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n.search-donor{\r\n  padding-left:50%; \r\n}\r\n\r\n\r\n#blood{\r\n    space-between:evenly;\r\n}\r\nh2{\r\n    color:#6B1A08;\r\n    padding-left:65%;\r\n    font-weight:bold;\r\n}\r\n\r\nh5{\r\n  padding-right: 5rem;\r\n}\r\n\r\nh6{\r\n    padding-left:60%;   \r\n}\r\ninput{\r\n    text-align:center;\r\n    width:40%;\r\n}\r\n\r\n\r\n\r\n`;",["130","131"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\SendRequest.component.js",["132","133"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport { bloodGroups } from '../../../context/BloodGroupsList';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios';\r\nimport ErrorNotice from '../../misc/ErrorNotice';\r\nimport Swal from 'sweetalert2';\r\n\r\nexport default function RecipientSendRequest() {\r\n    const [date, setDate] = useState();\r\n    const [address, setAddress] = useState();\r\n    const [quantity, setQuantity] = useState();\r\n    const [bloodGroup, setBloodGroup] = useState();\r\n\r\n    const { userLoginData} = useContext(UserContext);\r\n    const history = useHistory();\r\n\r\n    const [user_id , setUserId] = useState(userLoginData.userData.user_id)\r\n    const [error, setError] = useState();\r\n\r\n\r\n    useEffect(() => {\r\n        if (!userLoginData.userData)\r\n            history.push('/')\r\n        try {\r\n            if (userLoginData.userData.type !== \"Recipient\")\r\n                history.push(`/${userLoginData.userData.type}`)\r\n\r\n        }\r\n        catch {\r\n            history.push('/')\r\n        }\r\n\r\n    }, [])\r\n\r\n\r\n    const submit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n\r\n            const newRequest = { date, address, quantity, bloodGroup , user_id };\r\n            await Axios.post(\"http://localhost:5000/bloodRequest/addBloodRequest\" , newRequest);  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Good job!',\r\n                'Your Request have been posted',\r\n                'success'\r\n            ) \r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <RecipientRequestContainer>\r\n            <div>\r\n                <div className=\"container container-fluid\">\r\n                    <div className=\"d-flex justify-content-center h-100\">\r\n                        <div class=\"card signupCard\">\r\n\r\n                            <div className=\"card-body\">\r\n                                <h3>Request For Blood</h3>\r\n                                {error && (\r\n                                    <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                                )}\r\n                                <form>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"bloodBankName\" >Blood Group: </label>\r\n                                        <select id=\"blood\" name=\"bloodGroup\" onChange={(e) => { setBloodGroup(e.target.value) }}>\r\n                                            {bloodGroups.map(item => {\r\n                                                return (\r\n                                                    <option value={item}> {item} </option>\r\n                                                )\r\n                                            })}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankAddress\" >Due Date: </label>\r\n                                        <input id=\"BloodBankAddress\" type=\"date\" className=\"form-control\" onChange={(e) => { setDate(e.target.value) }} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankContact\" >Address: </label>\r\n                                        <input id=\"BloodBankContact\" type=\"text\" className=\"form-control\" onChange={(e) => { setAddress(e.target.value) }} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankUsername\" >Quantity: </label>\r\n                                        <input id=\"BloodBankUsername\" type=\"text\" className=\"form-control\" onChange={(e) => { setQuantity(e.target.value) }} />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Request\" className=\"btn float-right login_btn\" onClick={submit} />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </RecipientRequestContainer>\r\n    )\r\n}\r\n\r\nconst RecipientRequestContainer = styled.div`\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Righteous&display=swap');\r\n\r\nhtml,body{\r\nheight: 100%;\r\n}\r\n\r\nlabel {\r\npadding-right: 20px;\r\n}\r\n\r\n.container{\r\nheight: 100%;\r\nalign-content: center;\r\npadding-top: 40px;\r\nfont-family: 'Righteous', cursive;\r\n}\r\n\r\n.signupCard{\r\nheight: 370px;\r\nalign-content: center;\r\nmargin: auto;\r\nwidth: 500px;\r\nbackground-color: rgba(15, 74, 92, 0.473) ;\r\n}\r\n\r\n.card-body h3{\r\ncolor: white;\r\n}\r\n\r\n#blood{\r\n    width:75%;\r\n    border:none;\r\n}\r\n\r\n\r\n.login_btn{\r\ncolor: black;\r\nbackground-color: #FFC312;\r\nwidth: 100px;\r\n}\r\n\r\n.login_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.ButtonGroup {\r\n    margin: auto;\r\n    justify-content: center;\r\n}\r\n\r\n\r\n`",["134","135"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorProfile.component.js",["136","137"],"import React, { useEffect, useContext, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios'\r\nimport { bloodGroups } from '../../../context/BloodGroupsList';\r\nimport ErrorNotice from '../../misc/ErrorNotice';\r\nimport Swal from 'sweetalert2'\r\n\r\n\r\n\r\nfunction DonorProfile() {\r\n\r\n    const [name, setName] = useState();\r\n    const [address, setAddress] = useState();\r\n    const [contact, setContact] = useState();\r\n    const [age, setAge] = useState();\r\n    const [bloodGroup, setBloodGroup] = useState();\r\n    const [username, setUserName] = useState();\r\n    const [email, setEmail] = useState();\r\n    const [password, setPassword] = useState();\r\n\r\n    //for error\r\n    const [error, setError] = useState();\r\n\r\n\r\n    const { userLoginData, setUserLoginData } = useContext(UserContext)\r\n    const history = useHistory();\r\n\r\n    const [isLoading, setLoading] = useState(true);  //for 1st loading data\r\n    let [profileData, setProfileData] = useState();\r\n\r\n    useEffect(() => {\r\n        if (!userLoginData.userData)\r\n            history.push('/')\r\n        try {\r\n            if (userLoginData.userData.type !== \"Donor\")\r\n                history.push(`/${userLoginData.userData.type}`)\r\n\r\n            const getData = async () => {\r\n                const userResponse = await Axios.get(\"http://localhost:5000/login/profile\", {\r\n                    headers: { \"auth-token\": userLoginData.token }\r\n                });\r\n                setProfileData(userResponse.data)\r\n                setName(userResponse.data.name);\r\n                setAddress(userResponse.data.address)\r\n                setContact(userResponse.data.contact)\r\n                setAge(userResponse.data.age)\r\n                setBloodGroup(userResponse.data.bloodGroup)\r\n                setEmail(userResponse.data.email)\r\n                setUserName(userResponse.data.username)\r\n\r\n                setLoading(false);\r\n            }\r\n            getData();\r\n\r\n        }\r\n        catch {\r\n            history.push('/')\r\n        }\r\n\r\n    }, [userLoginData])\r\n\r\n\r\n    const update = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n\r\n            const updatedUser = { name, address, contact, age, bloodGroup, email };\r\n            await Axios.post(`http://localhost:5000/user/update/${userLoginData.userData.user_id}`, updatedUser);  //user and its login data in diff tables\r\n            const UpdatedLogin = { username, password }\r\n            await Axios.post(`http://localhost:5000/login/update/${userLoginData.userData.id}`, UpdatedLogin);  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Good job!',\r\n                'Your Profile Updated Successfully',\r\n                'success'\r\n            ) //user and its login data in diff tables\r\n\r\n\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    };\r\n\r\n\r\n    const unregister = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n                await Axios.delete(` http://localhost:5000/login/delete`,\r\n                {\r\n                    headers: { \"auth-token\": userLoginData.token }\r\n                });  //user and its login data in diff tables\r\n\r\n            Swal.fire(\r\n                'Deleted',\r\n                'Awww! Sad to See You Go.',\r\n                'success'\r\n            ) //user and its login data in diff tables\r\n\r\n            setUserLoginData({\r\n                token: undefined,\r\n                userData: undefined,\r\n            });\r\n            localStorage.setItem(\"auth-token\", \"\");\r\n            history.push(\"/\")\r\n\r\n        } catch (err) {\r\n            err.response.data.msg && setError(err.response.data.msg);\r\n        }\r\n    }\r\n\r\n    if (isLoading) {\r\n        return (\r\n            <DonorProfileContainer>\r\n                <div class=\"box\">\r\n                    <div class=\"loader\">\r\n                        <span class=\"back\">\r\n                            <span>L</span>\r\n                            <span>O</span>\r\n                            <span>A</span>\r\n                            <span>D</span>\r\n                            <span>I</span>\r\n                            <span>N</span>\r\n                            <span>G</span>\r\n                        </span>\r\n                    </div>\r\n                </div>\r\n            </DonorProfileContainer>\r\n\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <DonorProfileContainer>\r\n            <div>\r\n                <h1 className=\"heading\">Update Profile:</h1>\r\n                <div className=\"container container-fluid\">\r\n                    <div className=\"d-flex justify-content-center h-100\">\r\n                        <div class=\"card signupCard\">\r\n                            <div className=\"card-body\">\r\n                                <h3>Profile</h3>\r\n                                {error && (\r\n                                    <ErrorNotice message={error} clearError={() => setError(undefined)} />\r\n                                )}\r\n                                <form>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"bloodBankName\" >Name: </label>\r\n                                        <input id=\"bloodBankName\" type=\"text\" value={name} className=\"form-control\"\r\n                                            onChange={(e) => setName(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"bloodGroup\" >Blood Group: </label>\r\n                                        <select value={bloodGroup} id=\"bloodGroup\" className=\"form-control\" onChange={(e) => setBloodGroup(e.target.value)}>\r\n                                            {bloodGroups.map(item => {\r\n                                                return (\r\n                                                    <option value={item}> {item} </option>\r\n                                                )\r\n                                            })}\r\n                                        </select>\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankAddress\" >Address: </label>\r\n                                        <input id=\"BloodBankAddress\" value={address} type=\"text\" className=\"form-control\"\r\n                                            onChange={(e) => setAddress(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankContact\" >Contact No: </label>\r\n                                        <input id=\"BloodBankContact\" type=\"text\" className=\"form-control\"\r\n                                            value={contact} onChange={(e) => setContact(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"age\" >Age: </label>\r\n                                        <input id=\"age\" type=\"text\" className=\"form-control\"\r\n                                            value={age} onChange={(e) => setAge(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankUsername\" >Username: </label>\r\n                                        <input id=\"BloodBankUsername\" type=\"text\" className=\"form-control\"\r\n                                            value={username} onChange={(e) => setUserName(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankEmail\" >Email: </label>\r\n                                        <input id=\"BloodBankEmail\" type=\"text\" className=\"form-control\"\r\n                                            value={email} onChange={(e) => setEmail(e.target.value)} />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankPassword\" >Blood Bank: </label>\r\n                                        <input id=\"BloodBankPassword\" type=\"text\" className=\"form-control\"\r\n                                            value={profileData.bloodBank} readonly />\r\n                                    </div>\r\n                                    <div className=\"input-group form-group\">\r\n                                        <label for=\"BloodBankPassword\" >Password: </label>\r\n                                        <input id=\"BloodBankPassword\" type=\"password\" className=\"form-control\"\r\n                                            onChange={(e) => setPassword(e.target.value)} />\r\n                                    </div>\r\n\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Unregister\" className=\"btn float-right unregister_btn\" onClick={unregister} />\r\n                                    </div>\r\n                                    <div className=\"form-group\">\r\n                                        <input type=\"submit\" value=\"Update\" className=\"btn float-right update_btn\" onClick={update} />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </DonorProfileContainer>\r\n    )\r\n\r\n}\r\n\r\nexport default DonorProfile;\r\n\r\nconst DonorProfileContainer = styled.div`\r\n\r\n@import url('https://fonts.googleapis.com/css2?family=Righteous&display=swap');\r\n\r\nhtml,body{\r\nheight: 100%;\r\n}\r\n\r\n.spinnerl{\r\n    padding-top:150px;\r\n    padding-bottom:150px;\r\n    \r\n}\r\n\r\nlabel {\r\npadding-right: 20px;\r\n}\r\n.container{\r\nheight: 100%;\r\nalign-content: center;\r\npadding-top: 50px;\r\nfont-family: 'Righteous', cursive;\r\n}\r\n\r\n.signupCard{\r\nheight: 650px;\r\nalign-content: center;\r\nmargin: auto;\r\nwidth: 500px;\r\nbackground-color: rgba(15, 74, 92, 0.473) ;\r\n}\r\n\r\n.card-header {\r\nbackground-color: white;\r\n}\r\n.card-body h3{\r\ncolor: white;\r\ntext-align:center;\r\npadding-bottom:5px;\r\n}\r\n#blood{\r\n    width:75%;\r\n    border:none;\r\n}\r\n\r\n.update_btn{\r\ncolor: black;\r\nbackground-color: #FFC312;\r\nwidth: 100px;\r\nmargin: 0 40px;\r\n}\r\n\r\n.update_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.unregister_btn{\r\n    color: white;\r\n    background-color: #e02525;\r\n    width: 100px;\r\n    margin: 0 40px;\r\n}\r\n    \r\n.unregister_btn:hover{\r\ncolor: black;\r\nbackground-color: white;\r\n}\r\n\r\n.ButtonGroup {\r\n    margin: auto;\r\n    justify-content: center;\r\n}\r\n.heading{\r\n    padding-top:5%;\r\n    padding-left:30%\r\n}\r\n\r\n@import url(https://fonts.googleapis.com/css?family=Roboto:300);\r\n\r\n \r\n.box{\r\n    background: none;\r\n    margin-top: 200px;\r\n\tpadding-top:300px;\r\n}\r\n\r\n.loader{\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n}​\r\n\t.back {\r\n\t\tmargin:1em auto;\r\n\t}\r\n\t.back span {\r\n\t\tfont-size:3em;\r\n\t\tcolor:#F2C640;;\r\n\t\tbackground: #e02525;\r\n\t\tdisplay:table-cell;\r\n\t\tbox-shadow:inset 0 0 5px rgba(0,0,0,0.3), 0 5px 0 #ccc;\r\n\t\tpadding: 0 15px;\r\n\t\tline-height: 100px;\r\n\t\tanimation:jumb 2s infinite;\r\n\t}\r\n\t@keyframes jumb {\r\n\t\t0% {\r\n\t\t\ttransform:translateY(0px)\r\n\t\t}\r\n\t\t50% {\r\n\t\t\ttransform:translateY(-30px);\r\n\t\t\tbox-shadow:0 15px 0 #F2C640;\r\n\t\t}\r\n\t\t100% {\r\n\t\t\ttransform:translateY(0px)\t\r\n\t\t}\r\n\t}\r\n\t.back span:nth-child(1) {\r\n\t\tanimation-delay:0s;\r\n\t}\r\n\t.back span:nth-child(2) {\r\n\t\tanimation-delay:.1s;\t\r\n\t}\r\n\t.back span:nth-child(3) {\r\n\t\tanimation-delay:.2s;\r\n\t}\r\n\t.back span:nth-child(4) {\r\n\t\tanimation-delay:.3s;\t\r\n\t}\r\n\t.back span:nth-child(5) {\r\n\t\tanimation-delay:.4s;\r\n\t}\r\n\t.back span:nth-child(6) {\r\n\t\tanimation-delay:.5s;\t\r\n\t}\r\n\t.back span:nth-child(7) {\r\n\t\tanimation-delay:.6s;\r\n\t}\r\n\r\n`\r\n\r\n{/* <DonorProfileContainer>\r\n<div class=\"d-flex justify-content-center\">\r\n    <div className=\"spinnerl\">\r\n        <div class=\"spinner-border text-danger\" role=\"status\" >\r\n            <span class=\"sr-only\">Loading...</span>\r\n        </div>\r\n    </div>\r\n</div>\r\n</DonorProfileContainer> */}\r\n\r\n","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-Recipient.component.js",[],["138","139"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Footer.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Header.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Navbar.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankDonor.component.js",["140"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorRequests.component.js",["141","142"],"import React, { Component } from 'react';\r\nimport { useState,useEffect, useContext } from \"react\";\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios';\r\nfunction DonorRequests() {\r\n\r\n  const { userLoginData } = useContext(UserContext)\r\n  const history = useHistory();\r\n  const[data,setData]=useState([]);\r\n  const [isLoading,setLoading]=useState(true);\r\n//  let recData=[];\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"Donor\")\r\n        history.push(`/${userLoginData.userData.type}`)\r\n      Axios.get(\"http://localhost:5000/bloodRequest/getAllRec\")\r\n        .then((response) => {\r\n          setData(response.data);\r\n          setLoading(false);\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n\r\n  }, [userLoginData])\r\n  if(isLoading){\r\n    return (\r\n      <DonorRequestsContainer>\r\n      <div class=\"d-flex justify-content-center\">\r\n        <div className=\"spinnerl\">\r\n          <div class=\"spinner-border text-danger\" role=\"status\" >\r\n            <span class=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </DonorRequestsContainer>\r\n  )\r\n  }\r\n    return (\r\n      <DonorRequestsContainer>\r\n        <div class=\"body\">\r\n          <h1>Requests</h1>\r\n          <table class=\"table table-striped\">\r\n            <thead class=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">RECIPIENT NAME</th>\r\n                <th scope=\"col\">BLOOD GROUP</th>\r\n                <th scope=\"col\">DUE DATE</th>\r\n                <th scope=\"col\">CONTACT NO</th>\r\n                <th scope=\"col\">QUANTITY</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {data.request.map((result,index) => {\r\n            return (\r\n             \r\n                 <tr>\r\n                   <td>{index+1}</td>\r\n                   <td>{data.recipient[index].name}</td>\r\n                  <td>{result.bloodGroup}</td>\r\n                  <td>{(new Date(result.due_date)).toLocaleString().split(',')[0]}</td>\r\n                  <td>{data.recipient[index].contact}</td>\r\n                  <td>{result.quantity}</td>\r\n                </tr>\r\n               \r\n            )\r\n          })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </DonorRequestsContainer>\r\n    )\r\n}\r\nexport default DonorRequests;\r\n\r\nconst DonorRequestsContainer = styled.div`\r\n\r\n.spinnerl{\r\n  padding-top:150px;\r\n  padding-bottom:150px;\r\n  \r\n}\r\n\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\RecipientProfile.component.js",["143"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataDonor.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\index.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\login-form-admin.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\login-form.component.js",["144","145"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankRequest.component.js",["146"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Donor\\DonorMakeDonations.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\misc\\ErrorNotice.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\context\\BloodGroupsList.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\Sidebar.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\updateProfile.js",["147"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\App.js",["148"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-bloodBank.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\context\\userDetailContext.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\Recipient\\ViewRequest.component.js",["149"],"import React, { useEffect, useContext, useState  } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\nimport UserContext from '../../../context/userDetailContext'\r\nimport Axios from 'axios'\r\nfunction RecipientRequests(){\r\n  const { userLoginData } = useContext(UserContext)\r\n  const [isLoading,setLoading]=useState(true);\r\n  const history = useHistory();\r\n  const [data,setData]=useState([]);\r\n  useEffect(() => {\r\n    if (!userLoginData.userData)\r\n      history.push('/')\r\n    try {\r\n      if (userLoginData.userData.type !== \"Recipient\")\r\n        history.push(`/${userLoginData.userData.type}`)\r\n\r\n      Axios.get(`http://localhost:5000/bloodRequest/viewRequests/${userLoginData.userData.user_id}`)\r\n      .then((response) => {\r\n        setData(response.data);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error)\r\n      })\r\n         \r\n    }\r\n    catch {\r\n      history.push('/')\r\n    }\r\n\r\n  },[userLoginData])\r\n  if(isLoading)\r\n  {\r\n    return (\r\n     \r\n    <div class=\"d-flex justify-content-center\">\r\n    <div class=\"spinner-border text-danger\" role=\"status\" >\r\n      <span class=\"sr-only\">Loading...</span>\r\n    </div>\r\n  </div>\r\n\r\n)}\r\n    return (\r\n      <RecipientContainer>\r\n        <div class=\"body\">\r\n          <h1>Patient Requests</h1>\r\n          <br/>\r\n          <table class=\"table table-striped\">\r\n            <thead class=\"thead\">\r\n              <tr>\r\n                <th scope=\"col\">ID</th>\r\n                <th scope=\"col\">RECIPIENT NAME</th>\r\n                <th scope=\"col\">AGE</th>\r\n                <th scope=\"col\">BLOOD GROUP</th>\r\n                <th scope=\"col\">ADDRESS</th>\r\n                <th scope=\"col\">BLOOD BANK</th>\r\n                <th scope=\"col\">QUANTITY</th>\r\n                <th scope=\"col\">STATUS</th>\r\n                <th scope=\"col\">DUE DATE</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n            {data.userDetails.map((result,index) => {\r\n            return (\r\n                 <tr>\r\n                   <td>{index+1}</td>\r\n                   <td>{data.recipient[0].name}</td>\r\n                   <td>{data.recipient[0].age}</td>\r\n                  <td>{result.bloodGroup}</td>\r\n                  <td>{result.address}</td>\r\n                  <td>{data.recipient[0].bloodBank}</td>\r\n                  <td>{result.quantity}</td>\r\n                  <td>{data.status[index]}</td>\r\n                  <td>{(new Date(result.due_date)).toLocaleString().split(',')[0]}</td>\r\n                </tr>  \r\n            )\r\n          })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </RecipientContainer>\r\n    )\r\n  }\r\nexport default RecipientRequests;\r\n\r\nconst RecipientContainer = styled.div`\r\n.thead{\r\n    background-color:Black;\r\n    color:white;\r\n    font-weight:bold;\r\n    font-size:15px;\r\n    width:50%;\r\n}\r\n.table table-striped{\r\n    width:50%;\r\n}\r\n.body{\r\n    padding-left:20%;\r\n    padding-right:10%;\r\n    padding-top:3%;\r\n}\r\n`;","E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataBloodBank.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\pages\\BloodBank\\BankReciever.component.js",["150"],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\OurVision.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\auth\\signup-form-Donor.component.js",[],"E:\\Study\\ReactLearn\\blood-bank-system\\src\\Components\\layout\\SidebarDataRecipient.js",[],{"ruleId":"151","severity":1,"message":"152","line":35,"column":6,"nodeType":"153","endLine":35,"endColumn":21,"suggestions":"154"},{"ruleId":"155","severity":1,"message":"156","line":81,"column":38,"nodeType":"157","messageId":"158","endLine":81,"endColumn":40},{"ruleId":"159","severity":1,"message":"160","line":82,"column":26,"nodeType":"161","messageId":"162","endLine":82,"endColumn":28},{"ruleId":"159","severity":1,"message":"160","line":86,"column":36,"nodeType":"161","messageId":"162","endLine":86,"endColumn":38},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":19,"column":22,"nodeType":"169","messageId":"170","endLine":19,"endColumn":31},{"ruleId":"151","severity":1,"message":"171","line":35,"column":8,"nodeType":"153","endLine":35,"endColumn":10,"suggestions":"172"},{"ruleId":"163","replacedBy":"173"},{"ruleId":"165","replacedBy":"174"},{"ruleId":"151","severity":1,"message":"152","line":62,"column":8,"nodeType":"153","endLine":62,"endColumn":23,"suggestions":"175"},{"ruleId":"176","severity":1,"message":"177","line":362,"column":1,"nodeType":"178","messageId":"179","endLine":370,"endColumn":29},{"ruleId":"163","replacedBy":"180"},{"ruleId":"165","replacedBy":"181"},{"ruleId":"151","severity":1,"message":"152","line":92,"column":6,"nodeType":"153","endLine":92,"endColumn":21,"suggestions":"182"},{"ruleId":"167","severity":1,"message":"183","line":1,"column":17,"nodeType":"169","messageId":"170","endLine":1,"endColumn":26},{"ruleId":"151","severity":1,"message":"152","line":33,"column":6,"nodeType":"153","endLine":33,"endColumn":21,"suggestions":"184"},{"ruleId":"151","severity":1,"message":"152","line":62,"column":8,"nodeType":"153","endLine":62,"endColumn":23,"suggestions":"185"},{"ruleId":"167","severity":1,"message":"183","line":2,"column":17,"nodeType":"169","messageId":"170","endLine":2,"endColumn":26},{"ruleId":"167","severity":1,"message":"186","line":21,"column":13,"nodeType":"169","messageId":"170","endLine":21,"endColumn":26},{"ruleId":"151","severity":1,"message":"152","line":24,"column":6,"nodeType":"153","endLine":24,"endColumn":21,"suggestions":"187"},{"ruleId":"151","severity":1,"message":"188","line":54,"column":8,"nodeType":"153","endLine":54,"endColumn":23,"suggestions":"189"},{"ruleId":"167","severity":1,"message":"190","line":4,"column":35,"nodeType":"169","messageId":"170","endLine":4,"endColumn":41},{"ruleId":"151","severity":1,"message":"152","line":32,"column":5,"nodeType":"153","endLine":32,"endColumn":20,"suggestions":"191"},{"ruleId":"151","severity":1,"message":"152","line":92,"column":6,"nodeType":"153","endLine":92,"endColumn":21,"suggestions":"192"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["193"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-native-reassign",["194"],"no-negated-in-lhs",["195"],"no-unused-vars","'setUserId' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'history' and 'userLoginData.userData'. Either include them or remove the dependency array.",["196"],["194"],["195"],["197"],"no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock",["194"],["195"],["198"],"'Component' is defined but never used.",["199"],["200"],"'userLoginData' is assigned a value but never used.",["201"],"React Hook useEffect has missing dependencies: 'history' and 'props.match.params.id'. Either include them or remove the dependency array.",["202"],"'Switch' is defined but never used.",["203"],["204"],{"desc":"205","fix":"206"},"no-global-assign","no-unsafe-negation",{"desc":"207","fix":"208"},{"desc":"205","fix":"209"},{"desc":"205","fix":"210"},{"desc":"205","fix":"211"},{"desc":"205","fix":"212"},{"desc":"205","fix":"213"},{"desc":"214","fix":"215"},{"desc":"205","fix":"216"},{"desc":"205","fix":"217"},"Update the dependencies array to be: [history, userLoginData]",{"range":"218","text":"219"},"Update the dependencies array to be: [history, userLoginData.userData]",{"range":"220","text":"221"},{"range":"222","text":"219"},{"range":"223","text":"219"},{"range":"224","text":"219"},{"range":"225","text":"219"},{"range":"226","text":"219"},"Update the dependencies array to be: [history, props.match.params.id, userLoginData]",{"range":"227","text":"228"},{"range":"229","text":"219"},{"range":"230","text":"219"},[1076,1091],"[history, userLoginData]",[1167,1169],"[history, userLoginData.userData]",[2146,2161],[2390,2405],[1004,1019],[2155,2170],[676,691],[1842,1857],"[history, props.match.params.id, userLoginData]",[989,1004],[2457,2472]]